<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Halcyon days</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lhalcyon.com/"/>
  <updated>2018-03-28T13:35:33.049Z</updated>
  <id>https://lhalcyon.com/</id>
  
  <author>
    <name>L</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter基础-(3)Widget之文本Text</title>
    <link href="https://lhalcyon.com/flutter-widget-text/"/>
    <id>https://lhalcyon.com/flutter-widget-text/</id>
    <published>2018-03-26T16:00:00.000Z</published>
    <updated>2018-03-28T13:35:33.049Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本来打算第三篇文章来讲解 Flutter 单子布局widget , 奈何 <strong>18种单子布局widget</strong> 内容颇多,加之年后有了新项目要开发 , 使得文章产出周期被拉长 :(  .  这里先来篇简单的关于Text的文章 , 下次更新将会发出 Flutter系列的目录及布局widget的文章.</p></blockquote><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p><a href="https://docs.flutter.io/flutter/widgets/Text-class.html" target="_blank" rel="noopener">Text</a>  文本是app里常见的控件 , 用以显示一串单一样式的文本 . 该字符串可跨越多行 , 或根据布局约束显示在同一行中</p><p>最简单的可以直接用这样的代码来展示文本 , 类似 Android 里的 TextView , iOS 里的 UILabel .</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Text(<span class="string">'简单的文本'</span>)</span><br></pre></td></tr></table></figure><p>代码未指定样式 , 此时将使用最近的 DefaultTextStyle 样式 . 若给定样式中 TextStyle.inherit 属性为true , 给定样式则将与最近的 DefaultTextStyle 样式合并 . </p><blockquote><p>类似 Android 里 , style.xml 主题样式 AppTheme 中定义了文本样式 , 并且将其设置为 Application 的主题样式 , 那么新建一个 TextView 就会默认使用 AppTheme中定义的文本样式 , 而当给这个 TextView 设置样式时,此样式就会和主题样式进行合并 </p></blockquote><p>当 TextStyle.inherit 属性设置为 false 时 , 文本样式会恢复到默认状态: 白色, 10像素 , sans-serif 字体</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TextStyle _inheritBigFont = <span class="keyword">new</span> TextStyle(inherit: <span class="keyword">true</span>, fontSize: <span class="number">24.0</span>);</span><br><span class="line"><span class="keyword">final</span> TextStyle _notInheritBigFont = <span class="keyword">new</span> TextStyle(inherit: <span class="keyword">false</span>, fontSize: <span class="number">24.0</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> Text(<span class="string">'inherit true'</span>, style: widget._inheritBigFont)</span><br><span class="line"><span class="keyword">new</span> Text(<span class="string">'inherit false'</span>, style: widget._notInheritBigFont)</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fpst9zllwxj306u0dfaaj.jpg" alt=""></p><p>文本样式鸟瞰</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fpstut8a0uj305k084mzc.jpg" alt=""></p><h4 id="RichText"><a href="#RichText" class="headerlink" title="RichText"></a>RichText</h4><p>要显示多样式的文本 , 需要使用富文本 <a href="https://docs.flutter.io/flutter/widgets/RichText-class.html" target="_blank" rel="noopener">RichText</a></p><p>在开发中 , 有一些常见的应用场景需要用到富文本 .  比如在很多 app 注册 ,开户界面会有一个同意协议的模块 , </p><p><em>我已阅读并同意《xxx协议》</em> , 协议名称通常高亮显示并且可以点击打开协议页面 .</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/gestures.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoText</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> TextStyle _protocolFont = <span class="keyword">new</span> TextStyle(fontSize: <span class="number">16.0</span>);</span><br><span class="line">  <span class="keyword">final</span> TextStyle _inheritBigFont =</span><br><span class="line">      <span class="keyword">new</span> TextStyle(inherit: <span class="keyword">true</span>, fontSize: <span class="number">24.0</span>);</span><br><span class="line">  <span class="keyword">final</span> TextStyle _notInheritBigFont =</span><br><span class="line">      <span class="keyword">new</span> TextStyle(inherit: <span class="keyword">false</span>, fontSize: <span class="number">24.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  DemoTextState createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DemoTextState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoTextState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">DemoText</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">'Text Demo'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Builder(builder: builderBody));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget builderBody(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> TapGestureRecognizer recognizer = <span class="keyword">new</span> TapGestureRecognizer();</span><br><span class="line">    recognizer.onTap = () &#123;</span><br><span class="line">      Scaffold.of(context).showSnackBar(<span class="keyword">new</span> SnackBar(</span><br><span class="line">            content: <span class="keyword">new</span> Text(<span class="string">'协议被点击!'</span>),</span><br><span class="line">          ));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Divider divider = <span class="keyword">new</span> Divider(color: Colors.white, height: <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(</span><br><span class="line">        color: Colors.grey,</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: <span class="keyword">new</span> Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">new</span> Text(<span class="string">'inherit true'</span>, style: widget._inheritBigFont),</span><br><span class="line">            <span class="keyword">new</span> Text(<span class="string">'inherit false'</span>, style: widget._notInheritBigFont),</span><br><span class="line">            divider,</span><br><span class="line">            <span class="keyword">new</span> Text(</span><br><span class="line">              <span class="string">'龙骑士囧雪诺JohnSnow'</span>,</span><br><span class="line">              style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  fontSize: <span class="number">24.0</span>,</span><br><span class="line">                  fontStyle: FontStyle.italic,</span><br><span class="line">                  letterSpacing: <span class="number">2.0</span>,</span><br><span class="line">                  decoration: TextDecoration.underline),</span><br><span class="line">            ),</span><br><span class="line">            divider,</span><br><span class="line">            <span class="keyword">new</span> RichText(</span><br><span class="line">              text: <span class="keyword">new</span> TextSpan(</span><br><span class="line">                text: <span class="string">'我已阅读'</span>,</span><br><span class="line">                style: widget._protocolFont,</span><br><span class="line">                children: &lt;TextSpan&gt;[</span><br><span class="line">                  <span class="keyword">new</span> TextSpan(</span><br><span class="line">                      text: <span class="string">'《从flutter入门到放弃》'</span>,</span><br><span class="line">                      style: <span class="keyword">new</span> TextStyle(color: Colors.redAccent),</span><br><span class="line">                      recognizer: recognizer),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpsu9h19ckj306u0dft9h.jpg" alt=""></p><p>TapGestureRecognizer 是手势识别者 , 后面讲到手势时再具体说明 . 这里我们先知道它可以用来给富文本某一段添加点击事件 .  这里我们点击协议后 , 会弹出一个SnackBar提示协议被点击了 . </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本来打算第三篇文章来讲解 Flutter 单子布局widget , 奈何 &lt;strong&gt;18种单子布局widget&lt;/strong&gt; 内容颇多,加之年后有了新项目要开发 , 使得文章产出周期被拉长 :(  .  这里先来篇简单的关于Text的文章
      
    
    </summary>
    
      <category term="Flutter" scheme="https://lhalcyon.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://lhalcyon.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter基础-(2)基本概念及首个应用</title>
    <link href="https://lhalcyon.com/flutter-basic-concept/"/>
    <id>https://lhalcyon.com/flutter-basic-concept/</id>
    <published>2018-03-07T16:00:00.000Z</published>
    <updated>2018-03-21T13:26:34.411Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://lhalcyon.com/flutter-basic-env">上一篇文章</a> 中,我们讲解了 Flutter 开发环境搭建 , 以及运行了官方demo简单体验了下 Flutter app .</p><p>此篇我们将开始对一些 Flutter app 中的一些基本概念进行讲解 , 一些基本的操作做一些示例 , 主要是参考官网的教程 <a href="https://flutter.io/get-started/codelab/" target="_blank" rel="noopener">Write Your First Flutter App</a> </p><div class="note info"><p>若你对面向对象编程熟悉,以及对基本编程概念如变量、循环、条件了解 , 则适合阅读本篇文章 . 不必需要拥有 Dart 或移动编程经验.</p><p>为了更好的阅读体验 , 请点击 <a href="https://lhalcyon.com/flutter-basic-concept/">阅读原文</a>   :)</p></div><a id="more"></a><ul><li>步骤 1 : <a href="#step1">创建及启动 Flutter app</a></li><li>步骤 2 : <a href="#step2">使用一个外部的程序包</a></li><li>步骤 3 : <a href="#step3">增加一个 Stateful Widget</a></li><li>步骤 4 : <a href="#step4">创建一个无限滚动的 ListView</a></li><li>步骤 5 : <a href="#step5">增加交互</a></li><li>步骤 6 : <a href="#step6">跳转到新页面</a></li><li>步骤 7 : <a href="#step7">通过主题改变UI</a></li><li><a href="#done">完成!</a></li></ul><h3 id="我们将创建什么"><a href="#我们将创建什么" class="headerlink" title="我们将创建什么"></a>我们将创建什么</h3><p>我们将实现一个简单的移动应用 , 它会生成创业公司的名称 . 用户可以选择和反选名称 , 保存喜好的那些 . 代码一次生成 10 个名称 . 当用户滑动时 , 新一批的名称就会生成 . 用户可以点击导航栏右上的按钮进入一个只展示喜好的名称的列表新页面.</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp6eb8abo5g306e0dw1kx.gif" alt=""></p><div class="note default"><p><strong>我们将学到:</strong></p><ul><li>Flutter app 的基本结构</li><li>使用额外的包去拓展功能</li><li>使用热部署来快速开发</li><li>如何去实现一个stateful 小部件</li><li>如何创建一个无线滑动,懒加载的列表</li><li>如何跳转去下一个界面</li><li>如果通过主题去修改app外观</li></ul></div><p><span id="step1"></span></p><h3 id="步骤-1-创建及启动-Flutter-app"><a href="#步骤-1-创建及启动-Flutter-app" class="headerlink" title="步骤 1 : 创建及启动 Flutter app"></a>步骤 1 : 创建及启动 Flutter app</h3><p>这里创建一个简单的 flutter app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter create flutter_first_app</span><br><span class="line"><span class="built_in">cd</span> flutter_first_app</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>如有疑问 , 可参考 <a href="https://lhalcyon.com/flutter-basic-env/">前一篇文章</a> 指引</p><p>简单地 , 我们先将 <code>lib/main.dart</code>中的代码全部删除 , 替换为以下代码 , 其主要就是在屏幕中间展示 ‘Hello World’ .  </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> Text(<span class="string">'Hello World'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行得到结果</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp6is372okj309q0j5wf4.jpg" alt=""></p><h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><ul><li>这个例子创建了一个 Material Design 风格的app . <a href="https://material.io/guidelines/" target="_blank" rel="noopener">Material</a> 是一种在移动端及web上标准的视觉设计语言 . Flutter 提供了丰富的 Material 风格小部件</li><li>main 方法使用了一个大箭头<code>=&gt;</code>写法 , 它是一行代码功能或方法的缩写 . 同许多语言开发一样, <code>main()</code> 方法为程序入口 .</li><li>app 继承 StatefulWidget 使得其自身也是个widget . 在 Flutter 里 , <strong>大多数元素都是 widget</strong> , 包括对齐方式(alignment)、 内边距(padding)、布局(layout) .</li><li>Material 库 中的脚手架小部件 (Scaffold widget) , 提供了一个默认的导航栏、 标题、 内容属性在屏幕中维持了部件树🌲.部件子树可以很复杂.</li><li>一个小部件的主要工作就是提供 <code>build()</code>方法 , 它是用来表明如何展示其他低层级的widget.</li><li>这个示例的部件树由 包含一个 Text 子部件 的Center Widget 组成  . 这个 Center Widget 将其子部件树排列在屏幕中间 . </li></ul><p><span id="step2"></span></p><h3 id="步骤-2-使用一个外部的程序包"><a href="#步骤-2-使用一个外部的程序包" class="headerlink" title="步骤 2 : 使用一个外部的程序包"></a>步骤 2 : 使用一个外部的程序包</h3><p>在这个步骤里 , 我们将开始使用一个开源程序包 <strong>english_words</strong> , 它包含了较多的常用的英文单词还有一些工具方法 .</p><p>我们可以在 <a href="https://pub.dartlang.org/flutter/" target="_blank" rel="noopener">pub.dartlang.org</a> 找到 <a href="https://pub.dartlang.org/packages/english_words" target="_blank" rel="noopener">english_words</a> 及 其他开源程序包</p><p><strong>1.</strong> pubspec 文件负责管理 Flutter 应用的资源. 在 <strong>pubspec.yaml</strong> 文件中,添加 <strong>english_words</strong>(3.1.0或更高版本)到依赖里.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  flutter:</span></span><br><span class="line"><span class="attr">    sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cupertino_icons:</span> <span class="string">^0.1.0</span></span><br><span class="line"><span class="attr">  english_words:</span> <span class="string">^3.1.0</span></span><br></pre></td></tr></table></figure><p><strong>2. </strong>当我们在IDEA 视图中 , 修改yaml文件后 , 可点击右上方的 <strong>Packages get</strong> 使之生效.它会拉取我们才添加的依赖包, 控制台中打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br><span class="line">Running <span class="string">"flutter packages get"</span> <span class="keyword">in</span> flutter_first_app...</span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p><strong>3. </strong> 在 <strong>lib/main.dart</strong>文件中,添加 import 语句 , 导入依赖相关类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:english_words/english_words.dart'</span>;</span><br></pre></td></tr></table></figure><p><strong>4. </strong> 用开源库生成文本代替原来的 ‘Hello World’</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:english_words/english_words.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wordPair = <span class="keyword">new</span> WordPair.random();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          <span class="comment">//child: new Text('Hello World'), // Replace the highlighted text...</span></span><br><span class="line">          child: <span class="keyword">new</span> Text(wordPair.asPascalCase),  <span class="comment">// With this highlighted text.</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. </strong>若app正在运行, 可以通过点击⚡️按钮进行热部署. 每次点击或者保存时 , 会生成新的一个随机单词. 这是因为单词是在 <code>build(...)</code> 方法中生成, 它会在每次 MaterialApp 需要渲染或触发平台检视时执行.</p><p><span id="step3"></span></p><h3 id="步骤-3-增加一个-Stateful-Widget"><a href="#步骤-3-增加一个-Stateful-Widget" class="headerlink" title="步骤 3 : 增加一个 Stateful Widget"></a>步骤 3 : 增加一个 Stateful Widget</h3><p>Stateless widgets 是不可变的 , 意味着其属性是不可改变的 - 所有值均为final .</p><p>Stateful widgets 维持着生命周期中可变的状态 . 实现一个 stateful widget 需要至少两个类: 一个 State 类 和 一个创建State示例的 StatefulWidget .  StatefulWidget本身是不可变的 , 但是 State 类在widget生成周期中一直存留 . </p><p>在这个步骤里 , 我们将添加一个 stateful widget - RandomWords , 它创建自己的 State 类 - RandomWordsState . state 类将为widget最终维持建议的和喜好的单词.</p><p><strong>1. </strong> 添加 stateful RandomWords 到 main.dart </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> RandomWordsState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. </strong> 添加 RandomWordsState . 大部分app的代码会在这个类中 , 将维持着 RandomWords 部件的状态 . 这个类将会保存生成的词对 , 它们随着用户滑动页面无线增加 . 然后喜好的词对 , 用户通过点击列表的心形按钮进行添加或移除 .</p><p>我们一步一步来创建这个类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. </strong> 在添加 state 类后 , IDE会提示错误, 需要我们取实现未实现的方法 . </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wordPair = <span class="keyword">new</span> WordPair.random();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Text(wordPair.asPascalCase);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. </strong> 移除单词生成代码 , </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> RandomWords(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="step4"></span></p><h3 id="步骤-4-创建一个无限滚动的-ListView"><a href="#步骤-4-创建一个无限滚动的-ListView" class="headerlink" title="步骤 4 : 创建一个无限滚动的 ListView"></a>步骤 4 : 创建一个无限滚动的 ListView</h3><p>这个步骤里, 我们将扩充 RandomWordsState 类 来生成和展示单词对的列表. 当用户滑动页面, ListView widget 展示的列表将会无限增加. ListView 的 <code>builder</code> 工厂构造器允许我们视需懒加载创建列表视图</p><p> <strong>1. </strong>在 RandomWordsState 类中添加成员变量 <code>_suggestions</code> 列表用来保存推荐的单词对.在 Dart 语言中 , 以 <code>_</code>下划线开头的变量/方法为私有访问权限.</p><p>同样的 , 添加 <code>biggerFont</code> 变量用来使字体大小更大</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2 ~ 3. </strong>添加 <code>_buildSuggestions()</code>方法到 RandomWordsState 类中. 此方法负责构建列表 ListView 和展示建议的单词对. </p><p>ListView 类提供了一个 builder 属性 , <code>itemBuilder</code> 一个工厂构建者和指定匿名函数的回调功能.两个参数被传递给函数- <code>BuildContext</code> 还有行迭代器 <code>i</code> . 迭代器从 <code>0</code> 开始且每次方法调用递增.</p><p>添加 <code>_buildRow</code> 方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListView.builder(</span><br><span class="line">        <span class="comment">// padding 16</span></span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        <span class="comment">// 每一对单词对调用一次itemBuilder 回调 ,然后放置一个推荐的单词对在行内</span></span><br><span class="line">        <span class="comment">// 偶数行 , 函数增加个内容行显示单词对,</span></span><br><span class="line">        <span class="comment">// 奇数行 , 函数添加一条分割线小部件 (Divider Widget)去显示分割条目</span></span><br><span class="line"></span><br><span class="line">        itemBuilder: (context, i) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i.isOdd) <span class="keyword">return</span> <span class="keyword">new</span> Divider();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// index 为 i/2 的余整数</span></span><br><span class="line">          <span class="keyword">final</span> index = i ~/ <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (index &gt;= _suggestions.length) &#123;</span><br><span class="line">            <span class="comment">// ...生成10个词对,添加到list</span></span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>4. </strong>更新 RandomWordsState 的 build 方法 , 使用 <code>_buildSuggestions</code> ,不再直接使用调用单词生产库.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold (</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'Startup Name Generator'</span>),</span><br><span class="line">      ),</span><br><span class="line">    body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. </strong>更新 MyApp 的 build 方法 . 从 MyApp 中移除 Scaffold 和 AppBar 实例. 这些将会被 RandomWordsState 管理 ,这样将更容易地在下个步骤页面跳转时去改变导航栏上的名称.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Startup Name Generator'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> RandomWords(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp6udcnhf3j309q0j4q44.jpg" alt=""></p><p><span id="step5"></span></p><h3 id="步骤-5-增加交互"><a href="#步骤-5-增加交互" class="headerlink" title="步骤 5 : 增加交互"></a>步骤 5 : 增加交互</h3><p>这个步骤中 , 我们将增加可点击的心形图标到每一行 . 当用户点击列表条目时 , 触发其 “favorite” 状态 ,状态改变会将对应单词对添加到保存的集合或从中移除</p><p><strong>1. </strong> 添加 <code>_saved</code> 集合到 RandomWordsState 里 . 集合存储用户喜好的单词对 , 更倾向于用 Set 是因为 Set 中不允许有重复的条目</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _saved = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;WordPair&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. </strong>在 <code>_buildRow</code> 函数里 , 添加 <code>alreadySaved</code> 变量来检查确保单词对还未被添加到喜好的集合中.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">  <span class="keyword">final</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3 ~ 4. </strong>还是在<code>_buildRow</code> 里 , 添加心形图标 . 重启应用 , 我们可以看到心形已被添加 , 只是暂时没有交互事件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">  <span class="keyword">final</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">    title: <span class="keyword">new</span> Text(</span><br><span class="line">      pair.asPascalCase,</span><br><span class="line">      style: _biggerFont,</span><br><span class="line">    ),</span><br><span class="line">    trailing: <span class="keyword">new</span> Icon(</span><br><span class="line">      alreadySaved ? Icons.favorite : Icons.favorite_border,</span><br><span class="line">      color: alreadySaved ? Colors.red : <span class="keyword">null</span>,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. </strong>在<code>_buildRow</code> 中设置心形可点击. 如果一个单词条目被添加到喜欢的集合时, 再次单击它就能从喜欢的集合中移除 . 当心形被点击 , 函数会调用 <code>setState()</code>去通知框架状态被改变了.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">  <span class="keyword">final</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">    title: <span class="keyword">new</span> Text(</span><br><span class="line">      pair.asPascalCase,</span><br><span class="line">      style: _biggerFont,</span><br><span class="line">    ),</span><br><span class="line">    trailing: <span class="keyword">new</span> Icon(</span><br><span class="line">      alreadySaved ? Icons.favorite : Icons.favorite_border,</span><br><span class="line">      color: alreadySaved ? Colors.red : <span class="keyword">null</span>,</span><br><span class="line">    ),</span><br><span class="line">    onTap: () &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="keyword">if</span> (alreadySaved) &#123;</span><br><span class="line">          _saved.remove(pair);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _saved.add(pair);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>在 Flutter react式的框架中 , 调用 setState() 会为 State 对象触发 build() 方法 , 最后更新到UI上.</p></div><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp82yfuodij309q0j40u5.jpg" alt=""></p><p><span id="step6"></span></p><h3 id="步骤-6-跳转到新页面"><a href="#步骤-6-跳转到新页面" class="headerlink" title="步骤 6 : 跳转到新页面"></a>步骤 6 : 跳转到新页面</h3><p>在这个步骤里 , 我们将添加一个页面 (在Flutter里叫 route ) 展示喜好的推荐词对 . 我们将学到如何从主页面导航到新页面 .</p><p>在 Flutter 中 , Navigator 管理着一个包含app页面的栈 . 推送一个页面进入 Navigator 的栈中, 则会更新显示这个页面 .  从 Navigator栈中推出一个页面 , 则会显示上一个页面 .</p><p><strong>1 ~ 3. </strong> 在 RandomWordsState 的 build 方法中给 AppBar 添加一个列表图标 . 当用户点击图标 , 一个包含喜好列表的页面会被推送呈现 .</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'Startup Name Generator'</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          <span class="keyword">new</span> IconButton(icon: <span class="keyword">new</span> Icon(Icons.list), onPressed: _pushSaved),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 RandomWordsState 中添加 <code>_pushSaved</code>方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">void</span> _pushSaved() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4 ~ 6. </strong> 添加 MaterialPageRoute 及它的 builder . 添加代码生成 ListTile 行 . ListTile 的<code>divideTiles()</code> 方法在每一条条目间增加水平距离 . <code>divided</code> 变量保存着最终的行 , 通过函数 <code>toList()</code> 转换为列表</p><p>builder 属性返回一个 Scaffold , 包含了新页面的导航栏 ,名为 “Saved Suggestion” .新页面的内容部分由 ListView包含 ListTiles 行组成 , 每一行由一个 divider 分隔 .</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _pushSaved() &#123;</span><br><span class="line">  Navigator.of(context).push(</span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">      builder: (context) &#123;</span><br><span class="line">        <span class="keyword">final</span> tiles = _saved.map(</span><br><span class="line">          (pair) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">              title: <span class="keyword">new</span> Text(</span><br><span class="line">                pair.asPascalCase,</span><br><span class="line">                style: _biggerFont,</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">final</span> divided = ListTile</span><br><span class="line">          .divideTiles(</span><br><span class="line">            context: context,</span><br><span class="line">            tiles: tiles,</span><br><span class="line">          )</span><br><span class="line">          .toList();</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fp98s3h46ij30va0uqaeo.jpg" alt=""></p><p><span id="step7"></span></p><h3 id="步骤-7-通过主题改变UI"><a href="#步骤-7-通过主题改变UI" class="headerlink" title="步骤 7 : 通过主题改变UI"></a>步骤 7 : 通过主题改变UI</h3><p>在这个最终步骤中, 我们将改变app的主题 . </p><p><strong>1. </strong>我们可以简单地通过配置 ThemeData 类 改变app的主题 . 当前app是默认主题, 我们将改变主色为紫色</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Startup Name Generator'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> RandomWords(),</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primaryColor: Colors.purple</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后贴一下 <code>main.dart</code> 完整代码 , 方便小友们查看</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:english_words/english_words.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Startup Name Generator'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> RandomWords(),</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(primaryColor: Colors.purple),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> RandomWordsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _saved = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;WordPair&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line"></span><br><span class="line">  Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListView.builder(</span><br><span class="line">        <span class="comment">// padding 16</span></span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        <span class="comment">// 每一对单词对调用一次itemBuilder 回调 ,然后放置一个推荐的单词对在行内</span></span><br><span class="line">        <span class="comment">// 偶数行 , 函数增加个内容行显示单词对,</span></span><br><span class="line">        <span class="comment">// 奇数行 , 函数添加一条分割线小部件 (Divider Widget)去显示分割条目</span></span><br><span class="line"></span><br><span class="line">        itemBuilder: (context, i) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i.isOdd) <span class="keyword">return</span> <span class="keyword">new</span> Divider();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// index 为 i/2 的余整数</span></span><br><span class="line">          <span class="keyword">final</span> index = i ~/ <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (index &gt;= _suggestions.length) &#123;</span><br><span class="line">            <span class="comment">// ...生成10个词对,添加到list</span></span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">    <span class="keyword">final</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">      title: <span class="keyword">new</span> Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">      trailing: <span class="keyword">new</span> Icon(</span><br><span class="line">        alreadySaved ? Icons.favorite : Icons.favorite_border,</span><br><span class="line">        color: alreadySaved ? Colors.red : <span class="keyword">null</span>,</span><br><span class="line">      ),</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (alreadySaved) &#123;</span><br><span class="line">            _saved.remove(pair);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _saved.add(pair);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">'Startup Name Generator'</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line"><span class="comment">//          new IconButton(icon: new Icon(Icons.colorize),onPressed: _changeTheme),</span></span><br><span class="line">          <span class="keyword">new</span> IconButton(icon: <span class="keyword">new</span> Icon(Icons.list), onPressed: _pushSaved)</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _changeTheme()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _pushSaved() &#123;</span><br><span class="line">    Navigator.of(context).push(</span><br><span class="line">      <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">        builder: (context) &#123;</span><br><span class="line">          <span class="keyword">final</span> tiles = _saved.map(</span><br><span class="line">            (pair) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">                title: <span class="keyword">new</span> Text(</span><br><span class="line">                  pair.asPascalCase,</span><br><span class="line">                  style: _biggerFont,</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">final</span> divided = ListTile</span><br><span class="line">              .divideTiles(</span><br><span class="line">                context: context,</span><br><span class="line">                tiles: tiles,</span><br><span class="line">              )</span><br><span class="line">              .toList();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">            appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">              title: <span class="keyword">new</span> Text(<span class="string">'Saved Suggestions'</span>),</span><br><span class="line">            ),</span><br><span class="line">            body: <span class="keyword">new</span> ListView(children: divided),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="done"></span></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成!"></a>完成!</h3><p>至此 , 我们第一个 app 已经完成 . <a href="https://github.com/lhalcyon/flutter_first_app" target="_blank" rel="noopener">GitHub 地址</a>  </p><p>功能相对来说较简单 , 但是大体上让我们对开发 Flutter app 有了一定了解. 之后我们将延续阅读官网的教程 , 开始较全面地了解构建UI相关的部分.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://lhalcyon.com/flutter-basic-env&quot;&gt;上一篇文章&lt;/a&gt; 中,我们讲解了 Flutter 开发环境搭建 , 以及运行了官方demo简单体验了下 Flutter app .&lt;/p&gt;
&lt;p&gt;此篇我们将开始对一些 Flutter app 中的一些基本概念进行讲解 , 一些基本的操作做一些示例 , 主要是参考官网的教程 &lt;a href=&quot;https://flutter.io/get-started/codelab/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Write Your First Flutter App&lt;/a&gt; &lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;若你对面向对象编程熟悉,以及对基本编程概念如变量、循环、条件了解 , 则适合阅读本篇文章 . 不必需要拥有 Dart 或移动编程经验.&lt;/p&gt;
&lt;p&gt;为了更好的阅读体验 , 请点击 &lt;a href=&quot;https://lhalcyon.com/flutter-basic-concept/&quot;&gt;阅读原文&lt;/a&gt;   :)&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://lhalcyon.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://lhalcyon.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter基础-(1)环境搭建及demo运行</title>
    <link href="https://lhalcyon.com/flutter-basic-env/"/>
    <id>https://lhalcyon.com/flutter-basic-env/</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-03-21T13:09:54.952Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flutter.io/" target="_blank" rel="noopener">Flutter</a> 是一款谷歌用以同时在 iOS 和 Android 上制作高质量原生界面的移动应用UI框架.目前谷歌是已发布了 Flutter Beta 版,同时也提供了多个 Sample Project 供学习. Flutter 主要有着<strong>快速开发</strong>、<strong>有表现力及灵活的UI</strong>、<strong>原生表现</strong>等特点.</p><p><strong>快速开发</strong></p><p>极速热部署就能使app构建生效,使用大量可深度自定义化的小部件 (Widgets) 供快速开发原生界面.</p><p><strong>有表现力及灵活的UI</strong></p><p>快速地将特性集中在客户端用户体验上.分层体系结构允许深度定制,最终呈现快速渲染以及有表现力和灵活的设计</p><p><strong>原生表现</strong></p><p>Flutter的小部件包含了所有关键的平台差异,如滚动、导航、图标和字体,以在iOS和Android上提供完整的原生表现</p><div class="note info"><p>类似于 Fackbook 的 React Native , 我们可用 Flutter 开发一套代码,应用于 Android 以及 iOS 平台上.不仅如此, Flutter 还可应用于谷歌将推出的新系统 <a href="https://baike.baidu.com/item/Fuchsia/19900570?fr=aladdin" target="_blank" rel="noopener">Fuchsia</a> . 可以看出 , Flutter 确有统一移动端的能力 , 身为移动开发者 , 当然要有所了解. so , 接下来我们将开始 <strong>搭建开发环境 , 并且运行官方的 demo </strong></p><p>为了更好的阅读体验, 请点击<a href="https://lhalcyon.com/flutter-basic-env">阅读原文</a> :)</p></div><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先进入 <a href="https://flutter.io/get-started/install/" target="_blank" rel="noopener">Flutter Install</a> 选择相应操作系统下的安装包进行安装 <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fp33tj8o6uj30h7091t9j.jpg" alt=""></p><p>首先此处有个温馨小点 , 谷歌为中国开发者准备了国内镜像,为图中的链接 <a href="https://github.com/flutter/flutter/wiki/Using-Flutter-in-China" target="_blank" rel="noopener">this wiki article</a> . 主要是配置两个环境变量 <code>PUB_HOSTED_URL</code> 和 <code>FLUTTER_STORAGE_BASE_URL</code> , 安装时当检测到有这俩环境变量,就会优先读取变量存储的地址去安装.</p><p>创建或者打开 <code>$HOME/.bash_profile</code> , 在下方添加两行变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>然后 <code>source $HOME/.bash_profile</code> 使之在当前 terminal 生效.</p><p>最后可用 <code>echo $PUB_HOSTED_URL</code> 和 <code>echo $FLUTTER_STORAGE_BASE_URL</code>  检测是否添加成功</p><div class="note warning"><p>最好配置下这个地址.笔者尝试数次,科学上网期间但没配置这倆地址时,下载组件时总会崩溃中断 😧. </p></div><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fp3807eycaj30fa0840uo.jpg" alt=""></p><p>此处我们选择 macOS ,其他系统下的安装可自行参考谷歌文档.</p><h4 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h4><p>想要安装并运行 Flutter , 开发环境必须满足最低要求:</p><ul><li><strong>操作系统</strong> : macOS (64位)</li><li><strong>磁盘空间</strong> : 700 MB (不包含 Xcode 或 Android Studio的空间)</li><li><strong>工具</strong> : Flutter 依赖于这些系统环境里的命令行工具<ul><li><code>bash</code> , <code>mkdir</code> , <code>rm</code> , <code>git</code> , <code>curl</code> , <code>unzip</code> , <code>which</code></li></ul></li></ul><h4 id="获取-Flutter-SDK"><a href="#获取-Flutter-SDK" class="headerlink" title="获取 Flutter SDK"></a>获取 Flutter SDK</h4><p>使用 <code>git</code> 命令克隆库并且添加 <code>flutter</code> 工具到环境变量中. 运行 <code>flutter doctor</code>  会显示剩余需要去安装的依赖.</p><h5 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h5><p>当前我们需要克隆仓库<code>beta</code>分支 , 然后添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b beta https://github.com/flutter/flutter.git</span><br><span class="line"><span class="built_in">export</span> PATH=`<span class="built_in">pwd</span>`/flutter/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>以上命令只是设置临时变量,建议将其永久添加到环境变量中.</p><ol><li>创建或打开 <code>$HOME/.bash_profile</code> 文件.</li><li>添加以下行,并且替换 <code>[PATH_TO_FLUTTER_GIT_DIRECTORY]</code> 为你的 Flutter git目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>然后运行 <code>source $HOME/.bash_profile</code> 使之在当前 terminal 生效.</p><p>可用 <code>echo $PATH</code>  检测是否添加成功</p><h5 id="检测依赖"><a href="#检测依赖" class="headerlink" title="检测依赖"></a>检测依赖</h5><p>运行以下命令来检测必要依赖是否已经完成安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>这个命令检测环境然后将结果显示在命令行窗口. Dart SDK 与 Flutter 绑定在一起 , 没必要单独安装 Dart. 仔细检查结果,可能需要安装依赖或者执行任务 (粗体显示)</p><p>eg.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[-] Android toolchain - develop for Android devices</span><br><span class="line">    • Android SDK at /Users/obiwan/Library/Android/sdk</span><br><span class="line">    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ</span><br><span class="line">    • Try re-installing or updating your Android SDK,</span><br><span class="line">      visit https://flutter.io/setup/#android-setup for detailed instructions.</span><br></pre></td></tr></table></figure><p>第一次运行 flutter 命令 如( <code>flutter doctor</code> ), 会自行开始下载依赖库并编译. 后续的运行就会变的快的多. </p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fp3dbpgjtfj30vo0kcwh2.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fp3dgtv63fj30vo0zwalj.jpg" alt=""></p><p>Flutter 使用 Google Analytics 来匿名报告功能使用统计以及崩溃日志, 可通过 <code>flutter config --no-analytics</code> 来禁用报告.</p><blockquote><p>这里说句题外话 , 几年前谣传谷歌要采用新的 Android 开发语言 Sky 代替 Java . 后面沉溺了一段时间 , 最终它还是被谷歌发布出来了,只不过现在叫 Flutter . 但不难发现 , Flutter中多少还是有易容前的的影子,比如上图中第二个加载的包就叫 sky_engine ..</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fp4bn6wijvj306j087aav.jpg" alt=""></p><h4 id="编辑器设置"><a href="#编辑器设置" class="headerlink" title="编辑器设置"></a>编辑器设置</h4><p>环境搭建好了 , 开始选择编辑器了.</p><p>建议的编辑器有 Android Studio , IntelliJ IDEA , VS Code等.</p><ul><li>Android Studio 需要 3.0 或以上的版本</li><li>IntelliJ IDEA  需要 2017.1 或之后的版本</li><li>VS Code 需要 1.20 或以上的版本</li></ul><p>这里我们选择 IntelliJ IDEA 来作为编辑器并且安装 <code>Flutter</code> , <code>Dart</code> 两款插件 , 安装步骤主要为</p><ol><li>开启 IntelliJ IDEA</li><li>打开插件偏好设置 (macOS上为<strong>Preferences&gt;Plugins</strong> ,  Windows及Linux上为<strong>File&gt;Settings&gt;Plugins</strong>)</li><li>选择 <strong>Browse repositories…</strong> , 输入 Flutter 然后点击 install 安装</li><li>点击 <code>Yes</code> 当提示去安装 Dart Plugin</li><li>安装完成后重启 IDEA</li></ol><p>Android Studio 安装插件与 IntelliJ IDEA一致 , VS Code 的请参考<a href="https://flutter.io/get-started/editor/" target="_blank" rel="noopener">官网 Editor</a></p><h4 id="平台设置"><a href="#平台设置" class="headerlink" title="平台设置"></a>平台设置</h4><p>macOS 支持开发 Android 及 iOS  Flutter apps .完成其中一个平台的设置即可编译和运行 Flutter app .</p><h5 id="iOS-设置"><a href="#iOS-设置" class="headerlink" title="iOS 设置"></a>iOS 设置</h5><h6 id="安装-Xcode"><a href="#安装-Xcode" class="headerlink" title="安装 Xcode"></a>安装 Xcode</h6><p>我们需要安装 Xcode 7.2 或以上版本 , 整体步骤为:</p><ol><li>安装 Xcode 7.2 或以上的版本 (通过 <a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">web</a> 或者 <a href="https://itunes.apple.com/us/app/xcode/id497799835" target="_blank" rel="noopener">Mac AppStore</a>) </li><li>命令行运行 <code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</code> 配置 Xcode命令行工具以使用新安装的 Xcode 版本</li><li>确认 Xcode license 协议被签署过. 可通过打开一次 Xcode 或命令行运行 <code>sudo xcodebuild -license</code></li></ol><p>使用 Xcode 我们就能在 iOS 设备或模拟器上运行 Flutter apps</p><h6 id="设置iOS模拟器"><a href="#设置iOS模拟器" class="headerlink" title="设置iOS模拟器"></a>设置iOS模拟器</h6><ol><li>首先打开模拟器 通过命令 <code>open -a Simulator</code> 或者 Spotlight</li><li>通过检查模拟器的 <strong>Hardware &gt; Device </strong>菜单中得设置 , 以确保模拟器正在使用64位设备 (iPhone 5s或更高版本)</li><li>取决于开发设备屏幕尺寸 , 高屏幕密度的iOS模拟设备可能会在屏幕上溢出 , 在模拟器的<strong>Window &gt; Scale</strong>菜单下设置设备比例</li><li>通过运行 <code>flutter run</code> 来启动应用</li></ol><h6 id="部署到iOS设备"><a href="#部署到iOS设备" class="headerlink" title="部署到iOS设备"></a>部署到iOS设备</h6><p>要部署 Flutter app 到 iOS设备 , 我们需要一些额外的工具和 Apple 账号 . 还需要在设备上进行设置</p><ol><li>安装 <a href="https://brew.sh/" target="_blank" rel="noopener">homebrew</a></li><li>打开命令终端运行以下命令以安装工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>如若这些命令出现异常失败了, 运行 <code>brew doctor</code> 按照说明解决问题</p><p>然后依照 Xcode 签名流程来配置项目</p><ol><li>从Flutter项目目录中的终端窗口中运行<code>ios/Runner.xcworkspace</code>来打开Xcode工作空间 , 也可直接双击文件打开</li><li>在Xcode中,从左侧导航面板中选择 <code>Runner</code> 项目</li><li><code>Runner</code> target设置页面 , 确保在<strong>General &gt; Signing &gt; Team</strong>下的开发团队是被选中的. 当选择一个团队 , Xcode会创建并下载开发证书 , 并账号中注册此设备 , 然后创建并下载一个描述文件.</li></ol><p>如果是第一个iOS开发项目,则可能需要使用到 Apple ID 登录Xcode</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp571kdt53j30k00ao769.jpg" alt=""></p><p>当第一次使用设备进行iOS开发时, 需要在设备上信任Mac和开发证书.首次将iOS设备连接到Mac时,会弹出一个对话框,在对话框中点击信任即可.</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fp573bim2hj309h06y0v1.jpg" alt=""></p><p>然后去 iOS 设备上设置应用程序 , <strong>General &gt; Device Management</strong>下选择信任你的证书</p><p>若 Xcode中的自动签名失败 , 请验证项目中的<strong>General&gt; Identity&gt; Bundle Identifier</strong>下的值是否唯一</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp5756auutj30k00cwmzy.jpg" alt=""></p><p>然后可通过 <code>flutter run</code> 运行app</p><h5 id="Android-设置"><a href="#Android-设置" class="headerlink" title="Android 设置"></a>Android 设置</h5><h6 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a>安装 Android Studio</h6><p>我们需要安装并配置 Android Studio , 整体步骤为:</p><ol><li>下载并安装 <a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Android Studio</a></li><li>打开 Android Studio , 走完 ‘Android Studio 安装指南’ . 这将安装最新的 Android SDK, Android SDK Platform-Tools, and Android SDK Build-Tools , 这是 Flutter 开发 Android 必要的.</li></ol><h6 id="设置Android模拟器"><a href="#设置Android模拟器" class="headerlink" title="设置Android模拟器"></a>设置Android模拟器</h6><p><em>运行模拟器比较吃资源 , 这里建议还是使用Android真机</em>.   如若需要配置模拟器请参考<a href="https://flutter.io/setup-macos/" target="_blank" rel="noopener">官网</a></p><h6 id="设置Android设备"><a href="#设置Android设备" class="headerlink" title="设置Android设备"></a>设置Android设备</h6><p>要运行并且测试我们的应用在 Android 设备上 , 我们需要系统版本为 Android 4.1 及以上的 Android 设备</p><ol><li>打开 <strong>开发者选项</strong> 还有 <strong>USB调试</strong> .</li><li>使用USB将手机连接电脑 . 若手机出现提示,授权电脑访问手机</li><li>在命令执行 <code>flutter devices</code> 确认连接电脑的设备</li><li>然后可通过执行 <code>flutter run</code> 运行我们的app</li></ol><p>这里的 <code>flutter devices</code> 命令类似 <code>adb</code> 的 <code>adb devices</code> . 如若提示不可用 , 请将 adb 所在目录添加到环境变量 .</p><h3 id="运行app"><a href="#运行app" class="headerlink" title="运行app"></a>运行app</h3><h4 id="命令终端"><a href="#命令终端" class="headerlink" title="命令终端"></a>命令终端</h4><p>首先用 <code>flutter create</code> 命令创建新项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter create myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br></pre></td></tr></table></figure><p>以上命令创建了一个 名为 <code>myapp</code> 的 Flutter 项目 , 其为一个包含 <a href="https://material.io/guidelines/" target="_blank" rel="noopener">Material Components</a> 的简单demo . 项目目录里 , app的代码在 <code>lib/main.dart</code> 中.</p><p>然后运行app</p><ul><li>确保有设备已经连接 , 若无设备连接,请参考文中 <strong>平台设置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter devices</span><br></pre></td></tr></table></figure><ul><li>通过 <code>flutter run</code> 命令运行app</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>若不出意外,则运行成功</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp4ndxd52gj304t09ggm4.jpg" alt=""></p><p>尝试热部署 . Flutter 提供了热部署以供快速开发.</p><ol><li>打开 <code>lib/main.dart</code></li><li>修改界面文案,保存</li><li>在命令终端按下 ‘r’ </li></ol><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fp4pjenq1zj30va054js3.jpg" alt=""></p><p>界面文案即刻更新生效</p><h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h4><p>IntelliJ IDEA 和 Android Studio 对热更新操作更便捷.</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp4nyuuafqj30dl022jro.jpg" alt=""></p><p>同样是在运行后,修改文案保存,然后点击闪电⚡️Reload即可</p><blockquote><p>这里吐槽下, 首次运行 iOS 比 Android 要快不要太多. 主要是 Gradle构建的问题 . </p></blockquote><p>on Android :</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp4pp9lqhij30dm03baaw.jpg" alt=""></p><p>on iOS :</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp4pp7t2pjj30br03cjrz.jpg" alt=""></p><h3 id="运行官方Demo"><a href="#运行官方Demo" class="headerlink" title="运行官方Demo"></a>运行官方Demo</h3><p>创建的默认项目功能较简单,不能够给我们带来较深刻的体验. 我们可以参考 <a href="https://github.com/flutter/flutter/tree/master/examples" target="_blank" rel="noopener">Flutter Demo</a> .</p><p>这里我们拿其中较不错的 <code>flutter_gallery</code> 来运行.</p><p>首先下载下来,进入其目录.</p><div class="note info"><p>这里因为demo运行需要安装额外依赖,所以需要对终端/IDEA 进行科学上网配置.不清楚的请根据自身科学上网姿势配置 :)</p></div><p>然后运行 <code>flutter doctor</code> ,如果是IDEA打开则直接自动运行 , 可能得到这结果.</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fp4o6l07ezj30dj02t0tf.jpg" alt=""></p><p>此时打开项目目录中的 <code>pubspec.yaml</code> 找到 <code>test: 0.12.30+4</code> 改为 <code>test: 0.12.30+3</code> 即可</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fp4pfhaed4j306f0cmq3p.jpg" alt=""></p><blockquote><p>Flutter是一个初期的开源项目，它帮助开发者从一个代码库构建出高性能、高保真度的移动应用 . 这个Gallery是Flutter的许多小部件、行为、动画、布局等的预览 .</p></blockquote><p>正如 Flutter Gallery 官方介绍所说 , 它主要呈现的是一些小部件的预览 , 主题皮肤切换 , 控件风格切换等示例 . 后期的学习中可参考其进行.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://flutter.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter&lt;/a&gt; 是一款谷歌用以同时在 iOS 和 Android 上制作高质量原生界面的移动应用UI框架.目前谷歌是已发布了 Flutter Beta 版,同时也提供了多个 Sample Project 供学习. Flutter 主要有着&lt;strong&gt;快速开发&lt;/strong&gt;、&lt;strong&gt;有表现力及灵活的UI&lt;/strong&gt;、&lt;strong&gt;原生表现&lt;/strong&gt;等特点.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;极速热部署就能使app构建生效,使用大量可深度自定义化的小部件 (Widgets) 供快速开发原生界面.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有表现力及灵活的UI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速地将特性集中在客户端用户体验上.分层体系结构允许深度定制,最终呈现快速渲染以及有表现力和灵活的设计&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原生表现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Flutter的小部件包含了所有关键的平台差异,如滚动、导航、图标和字体,以在iOS和Android上提供完整的原生表现&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;类似于 Fackbook 的 React Native , 我们可用 Flutter 开发一套代码,应用于 Android 以及 iOS 平台上.不仅如此, Flutter 还可应用于谷歌将推出的新系统 &lt;a href=&quot;https://baike.baidu.com/item/Fuchsia/19900570?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuchsia&lt;/a&gt; . 可以看出 , Flutter 确有统一移动端的能力 , 身为移动开发者 , 当然要有所了解. so , 接下来我们将开始 &lt;strong&gt;搭建开发环境 , 并且运行官方的 demo &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了更好的阅读体验, 请点击&lt;a href=&quot;https://lhalcyon.com/flutter-basic-env&quot;&gt;阅读原文&lt;/a&gt; :)&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://lhalcyon.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://lhalcyon.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ+Gradle自定义war包名称</title>
    <link href="https://lhalcyon.com/idea-gradle_war/"/>
    <id>https://lhalcyon.com/idea-gradle_war/</id>
    <published>2018-02-21T16:00:00.000Z</published>
    <updated>2018-02-23T14:51:22.258Z</updated>
    
    <content type="html"><![CDATA[<p>最近在帮朋友开发小程序的 Java 后端,项目采用 Gradle 构建,使用IntelliJ开发. 开发中经常需要发包到外网上,方便前端联调,而IntelliJ默认构建的 war 包名称为<code>项目名-版本号</code>,使得每次上传war包至服务器tomcat时还得手动重命名,发布次数多了,就显得很繁琐.这里就水一篇,简短说明下 <strong>IntelliJ中Gradle构建如何自定义war包名称</strong>.</p><p>首先打开 Project Settings</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fopikcl9olj30mc01o3ys.jpg" alt=""></p><p>选择 Artifacts</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fopiml70qkj31kw190qa2.jpg" alt=""></p><p>前两个 <code>Gradle:xxx</code>  是创建Gradle项目并添加tomcat后,自动生成的.我们这里点击 + 新增</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fopiqgxj6ej31bg0hy0z2.jpg" alt=""></p><p>选择 <code>Web Application: Archive</code>    -&gt;    <code>Empty</code></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fopj7lkx3cj31bu0e0tbt.jpg" alt=""></p><p>修改war包名称及输出路径</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fopjt8ggu0j31c00midjh.jpg" alt=""></p><p>添加war包内容,同样选择 Artifact</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fopk3yib95j30qg0qoabp.jpg" alt=""></p><p>选择 Gradle: xxx (exploded) </p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fopk8hw84uj30h40aygmy.jpg" alt=""></p><p>之后打包只能选择 Build -&gt; Build Artifacts 然后选择自定义的build, 然后在输出目录下即可找到war包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在帮朋友开发小程序的 Java 后端,项目采用 Gradle 构建,使用IntelliJ开发. 开发中经常需要发包到外网上,方便前端联调,而IntelliJ默认构建的 war 包名称为&lt;code&gt;项目名-版本号&lt;/code&gt;,使得每次上传war包至服务器tomcat时还
      
    
    </summary>
    
      <category term="Java" scheme="https://lhalcyon.com/categories/Java/"/>
    
    
      <category term="IntelliJ" scheme="https://lhalcyon.com/tags/IntelliJ/"/>
    
      <category term="war" scheme="https://lhalcyon.com/tags/war/"/>
    
      <category term="Gradle" scheme="https://lhalcyon.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Hexo绑定自定义Https域名</title>
    <link href="https://lhalcyon.com/hexo_ssl_netlify/"/>
    <id>https://lhalcyon.com/hexo_ssl_netlify/</id>
    <published>2018-02-17T16:00:00.000Z</published>
    <updated>2018-02-18T13:08:10.308Z</updated>
    
    <content type="html"><![CDATA[<p>通常我们将<code>Hexo</code>博客部署到<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>上,然后绑定自定义域名.例如作者的 GitHub Page <code>lhalcyon.github.io</code>绑定到了<code>lhalcyon.com</code>上.但是 GitHub Pages 无法给自定义域名配置SSL</p><p><code>GitHub Pages</code>默认是支持https的,即我们可通常<code>https://lhalcyon.github.io</code>来访问博客,但是绑定自定义域名后,只能通过<code>http://lhalcyon.com</code>正常访问,如直接访问<code>https://lhalcyon.com</code>就会爆红</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fohklh3z27j30uw0360v3.jpg" alt=""></p><blockquote><p>由于博客已改造完成,就度娘了张示例图</p></blockquote><p>为了实现自定义域名SSL认证,通常的做法是在<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a>配置一个反向代理到<code>GitHub Pages</code>,但是其访问速度及稳定性不太好,再就是博客更新后生效也会有延迟,于是我们得寻索一个解决办法.</p><a id="more"></a><p>为了更好的阅读体验,请点击<a href="http://lhalcyon.com/hexo_ssl_netlify">阅读原文</a>😉.</p><p>起初是考虑将Hexo迁移到<a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener">Coding Pages</a>上,后来发现其免费托管下必须在首页对其做一个广告,否则访问会先跳转到一个中转广告页再进行跳转 ,想免广告只能升级黄金会员及以上,这点太不友好. <a href="https://www.v2ex.com/t/360701?p=1" target="_blank" rel="noopener">问题传送门</a></p><p>跳转页:</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fohqh0aj8bj30hq0e4q3t.jpg" alt=""></p><p>or 主动添加广告链接,审核过后会免去跳转页</p><p>某博客页脚添加的广告:</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fohlfgorftj30se02qgm2.jpg" alt=""></p><p>无疑这样大大影响我们的博客美观,不能接受,但又不想迁回<code>GitHub Pages</code>,怎么办?下面我们介绍一些<strong>免费及好用的静态网站托管平台</strong></p><h4 id="免费静态网站托管平台"><a href="#免费静态网站托管平台" class="headerlink" title="免费静态网站托管平台"></a>免费静态网站托管平台</h4><h5 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></h5><p><strong>优点</strong></p><ul><li>自带域名可https访问</li><li>可配置自定义域名</li></ul><p><strong>缺点</strong></p><ul><li>无法给自定义域名配置SSL</li></ul><h5 id="Bitbucket-Cloud"><a href="#Bitbucket-Cloud" class="headerlink" title="Bitbucket Cloud"></a><a href="https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html" target="_blank" rel="noopener">Bitbucket Cloud</a></h5><p>跟 GitHub Pages 功能一样,但是:</p><ul><li>无法自定义域名</li><li>能且只能通过 https 协议访问（http 协议会被跳转到 https 协议)</li><li>所有项目的静态网站代码都只能放在专门的站点仓库里（accountName.bitbucket.io) ,不能像 GitHub 那样可以在每个项目里用 gh-pages 分支保存文件</li></ul><h5 id="aerobatic"><a href="#aerobatic" class="headerlink" title="aerobatic"></a><a href="https://www.aerobatic.com/" target="_blank" rel="noopener">aerobatic</a></h5><p>Bitbucket 旗下的静态网站托管服务.</p><ul><li>可以使用 CLI 上传代码</li><li>支持自动构建 (Continuous Deployment)</li><li>可以自定义域名但是收费功能,自定义域名支持 https 且不需要提供证书,它会帮你生成一个</li></ul><h5 id="GitLab-Pages"><a href="#GitLab-Pages" class="headerlink" title="GitLab Pages"></a><a href="https://docs.gitlab.com/ee/user/project/pages/index.html" target="_blank" rel="noopener">GitLab Pages</a></h5><p>同样和 GitHub Pages 的功能一样,但是:</p><ul><li>自定义域名可配置https,不过需要上传证书</li></ul><h5 id="surge-sh"><a href="#surge-sh" class="headerlink" title="surge.sh"></a><a href="https://surge.sh/" target="_blank" rel="noopener">surge.sh</a></h5><ul><li>只能使用 CLI 上传代码</li><li>支持自定义域名,但开启 SSL 是收费功能且需要自行上传证书</li><li>支持200.html —— 适用于使用 History API 的 SPA</li></ul><h5 id="Firebase-Hosting"><a href="#Firebase-Hosting" class="headerlink" title="Firebase Hosting"></a><a href="https://firebase.google.com/docs/hosting/" target="_blank" rel="noopener">Firebase Hosting</a></h5><ul><li>只能使用 CLI 上传代码</li><li>支持自定义域名并支持一键开启 https</li><li>支持重定向（Redirects）和重写（Rewrites）功能（当网站使用 History API 时特别有用)</li><li>but 有被墙的风险……</li></ul><h5 id="Netlify-推荐"><a href="#Netlify-推荐" class="headerlink" title="Netlify (推荐)"></a><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a> (推荐)</h5><ul><li>可以使用 CLI 上传代码</li><li>支持自定义域名且自定义域名支持一键开启 https（证书来自 Let’s Encrype）</li><li>支持强制让用户通过 https 访问网站（开启后此功能后，http 的访问一律会 <strong>301</strong> 跳转到 https</li><li>支持自动构建</li><li>支持重定向（Redirects）和重写（Rewrites）功能</li><li>数据通过 HTTP2 协议传输</li><li>提供 webhooks 与 API</li></ul><h5 id="now"><a href="#now" class="headerlink" title="now"></a><a href="https://zeit.co/now" target="_blank" rel="noopener">now</a></h5><ul><li>可以使用 CLI 上传代码，或者链接一个 Git 仓库</li><li>不仅提供静态网站托管，同时也支持托管 Node.js 服务</li><li>支持自定义域名且自定义域名支持一键开启 https（证书来自 Let’s Encrype）</li><li>数据通过 HTTP2 协议传输</li><li>提供 API</li></ul><h5 id="Coding-Pages"><a href="#Coding-Pages" class="headerlink" title="Coding Pages"></a><a href="https://coding.net/help/doc/pages" target="_blank" rel="noopener">Coding Pages</a></h5><p>上面我们说过,收费机制甚不友好 </p><div class="note primary"><p>鉴于各平台特点,我们选择<a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a> </p></div><h4 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h4><h5 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h5><p>首先去 <a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a> 注册账号登录</p><p>接着点击页面右上角的 New site from Git </p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fohp095rn7j31320ouadv.jpg" alt=""></p><p>这里选择的 GitHub ,别忘记勾选访问公共仓库选项.之后授权给 Netlify 指定Repository,然后 Deploy</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fohp7k4kfgj312i0ui41t.jpg" alt=""></p><h5 id="设置自定义域名"><a href="#设置自定义域名" class="headerlink" title="设置自定义域名"></a>设置自定义域名</h5><p>点击 Domain settings 然后点击 Add custom domain.</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fohpl7hvpzj30wu0d6aay.jpg" alt=""></p><p>然后到域名解析处,修改域名CNAME记录,记录值就是设置完域名页面显示的配置值</p><h5 id="添加SSL证书"><a href="#添加SSL证书" class="headerlink" title="添加SSL证书"></a>添加SSL证书</h5><p>设置完成域名绑定后,设置中心选项有所变化,增加了一个 Enable HTTPS的选项 , 点击</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fohpvgiqssj30eq08c74t.jpg" alt=""></p><p>点击 Let’s Encrypt Certificate, 系统会自动签发证书给站点,若域名解析没问题就能签发成功</p><p>若想一直使用Https访问的话,就勾选 Force TLS  connections 强制所有访问转换为Https</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fohpzyq694j30xg0s6ad2.jpg" alt=""></p><p>至此,配置全部完成</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fohq3f3rylj30bc01mglp.jpg" alt=""></p><h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><p>Netlify 还有很多技巧,比如可以设置变量及命令.免费用户可以为网站设置变量、webhook等.付费用户则可以为网站设置更加详细的SEO优化.各位可以自行去挖掘~ 🧐</p><hr><ol><li>参考: <a href="https://github.com/lmk123/blog/issues/55" target="_blank" rel="noopener">https://github.com/lmk123/blog/issues/55</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常我们将&lt;code&gt;Hexo&lt;/code&gt;博客部署到&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Pages&lt;/a&gt;上,然后绑定自定义域名.例如作者的 GitHub Page &lt;code&gt;lhalcyon.github.io&lt;/code&gt;绑定到了&lt;code&gt;lhalcyon.com&lt;/code&gt;上.但是 GitHub Pages 无法给自定义域名配置SSL&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GitHub Pages&lt;/code&gt;默认是支持https的,即我们可通常&lt;code&gt;https://lhalcyon.github.io&lt;/code&gt;来访问博客,但是绑定自定义域名后,只能通过&lt;code&gt;http://lhalcyon.com&lt;/code&gt;正常访问,如直接访问&lt;code&gt;https://lhalcyon.com&lt;/code&gt;就会爆红&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fohklh3z27j30uw0360v3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于博客已改造完成,就度娘了张示例图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了实现自定义域名SSL认证,通常的做法是在&lt;a href=&quot;https://www.cloudflare.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt;配置一个反向代理到&lt;code&gt;GitHub Pages&lt;/code&gt;,但是其访问速度及稳定性不太好,再就是博客更新后生效也会有延迟,于是我们得寻索一个解决办法.&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://lhalcyon.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://lhalcyon.com/tags/Hexo/"/>
    
      <category term="SSL" scheme="https://lhalcyon.com/tags/SSL/"/>
    
      <category term="GitHub Pages" scheme="https://lhalcyon.com/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC+WebSocket+Gradle实现消息实时推送</title>
    <link href="https://lhalcyon.com/springmvc-websocket_im/"/>
    <id>https://lhalcyon.com/springmvc-websocket_im/</id>
    <published>2018-02-14T16:00:00.000Z</published>
    <updated>2018-02-15T09:06:03.428Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。 WebSocket通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。 在WebSocket API中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p></div><a id="more"></a><p>以上摘自<a href="https://zh.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">Wikipedia</a>.</p><p>本文将说明在<code>Intellij IDEA</code>下使用<code>Gradle</code>构建<code>SpringMVC</code>+<code>WebSocket</code>实现消息推送.为了更好的阅读体验,请点击<a href="http://lhalcyon.com/springmvc-websocket_im">阅读原文</a>😉.</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>在之前的文章中有详细的说明,此篇不做赘述.可参考<a href="http://lhalcyon.com/ssm_build/">IDEA+Gradle创建MyBatis+SpringMVC项目</a></p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><p>在<code>build.gradle</code>中导入denpendies</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------   Spring SpringMVC  start -------------------------</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-webmvc'</span>, <span class="string">version:</span> <span class="string">'4.2.4.RELEASE'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-context-support'</span>, <span class="string">version:</span> <span class="string">'4.2.4.RELEASE'</span></span><br><span class="line"><span class="comment">// ------------------------   Spring SpringMVC  end -------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------   WebSocket  start -------------------------</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-websocket'</span>, <span class="string">version:</span> <span class="string">'4.2.4.RELEASE'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-messaging'</span>, <span class="string">version:</span> <span class="string">'4.2.4.RELEASE'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'javax.servlet'</span>, <span class="string">name:</span> <span class="string">'javax.servlet-api'</span>, <span class="string">version:</span> <span class="string">'3.1.0'</span></span><br><span class="line"><span class="comment">// ------------------------   WebSocket  end -------------------------</span></span><br><span class="line"></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'log4j'</span>, <span class="string">name:</span> <span class="string">'log4j'</span>, <span class="string">version:</span> <span class="string">'1.2.17'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'com.google.code.gson'</span>, <span class="string">name:</span> <span class="string">'gson'</span>, <span class="string">version:</span> <span class="string">'2.8.2'</span></span><br></pre></td></tr></table></figure><div class="note warning"><p>此处需要注意的是<code>Spring</code>从<code>4.0+</code>版本开始支持WebSocket,而<code>servlet-api</code>需要为<code>3.0+</code>版本</p></div><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化spring 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决post乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处需要给<code>servlet</code>及<code>filter</code>添加异步<code>&lt;async-supported&gt;true&lt;/async-supported&gt;</code>.</p><p><code>spring-mvc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器,webSocket --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lhalcyon.king.controller,com.lhalcyon.king.socket"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/statics/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处需配置扫描controller和websocket所在包</p><p>还有一个<code>applicationContext-websocket.xml</code>配置文件我们在代码实现中说明</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="握手拦截器"><a href="#握手拦截器" class="headerlink" title="握手拦截器"></a>握手拦截器</h5><p><strong>HandshakeInterceptor</strong></p><p>拦截器说明</p><blockquote><p>An interceptor to copy information from the HTTP session to the “handshake<br>attributes” map to made available via <code>WebSocketSession.getAttributes()</code><br>Copies a subset or all HTTP session attributes and/or the HTTP session id</p></blockquote><p>拦截器主要用于用户登录标识的记录,便于后面获取指定用户的会话标识并向指定用户发送消息,</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1foggpirw1cj30wi064myw.jpg" alt=""></p><p>这里我们继承<code>HttpSessionHandshakeInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandshakeInterceptor</span> <span class="keyword">extends</span> <span class="title">HttpSessionHandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(HandshakeInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 握手前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ServerHttpResponse response, WebSocketHandler wsHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"++ HandshakeInterceptor: beforeHandshake ++"</span>+attributes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.beforeHandshake(request, response, wsHandler, attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 握手后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ServerHttpResponse response, WebSocketHandler wsHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"++ HandshakeInterceptor: afterHandshake ++"</span>);</span><br><span class="line">        <span class="keyword">super</span>.afterHandshake(request, response, wsHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beforeHandshake(..)</code></p><blockquote><p>Invoked before the handshake is processed.</p></blockquote><p><code>afterHandshake(..)</code></p><blockquote><p>Invoked after the handshake is done. The response status and headers indicate the results of the handshake, i.e. whether it was successful or not.</p></blockquote><p>两个方法调用时机均为字面所述,握手前后分别调用.主要是在握手前后去做一些事,比如将需要的数据设置到<code>attributes</code>里,之后在<code>WebSocketHandler</code>的session中获取这些数据.</p><h5 id="处理类"><a href="#处理类" class="headerlink" title="处理类"></a>处理类</h5><p><strong>WebSocketHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocketHandler</span> <span class="keyword">implements</span> <span class="title">WebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(MyWebSocketHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存所有的用户session</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;WebSocketSession&gt; users = <span class="keyword">new</span> ArrayList&lt;WebSocketSession&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"connect websocket success......."</span>);</span><br><span class="line"></span><br><span class="line">        users.add(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(WebSocketSession session, WebSocketMessage&lt;?&gt; message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">// 将消息JSON格式通过Gson转换成Map</span></span><br><span class="line">        <span class="comment">// message.getPayload().toString() 获取消息具体内容</span></span><br><span class="line">        Map&lt;String, Object&gt; msg = gson.fromJson(message.getPayload().toString(),</span><br><span class="line">                <span class="keyword">new</span> TypeToken&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">        log.info(<span class="string">"handleMessage......."</span>+message.getPayload()+<span class="string">"..........."</span>+msg);</span><br><span class="line">        String content = message.getPayload().toString();</span><br><span class="line">        <span class="comment">// 处理消息 msgContent消息内容</span></span><br><span class="line">        TextMessage textMessage = <span class="keyword">new</span> TextMessage(content, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 调用方法（发送消息给所有人）</span></span><br><span class="line">        sendMsgToAllUsers(textMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.warn(<span class="string">"handleTransportError"</span>);</span><br><span class="line">        users.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"connect websocket closed......."</span>);</span><br><span class="line">        users.remove(session);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给所有用户发送 信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsgToAllUsers</span><span class="params">(WebSocketMessage&lt;?&gt; message)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession user : users) &#123;</span><br><span class="line">            user.sendMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下对主要方法进行说明:</p><p><code>afterConnectionEstablished(..)</code></p><p>连接建立后调用,常用于记录用户的连接标识,便于后面信息发送.</p><p><code>handleTextMessage(..)</code></p><p>对消息进行处理.</p><p><code>handleTransportError(..)</code></p><p>连接异常处理.需要关闭出错会话连接</p><p><code>afterConnectionClosed(..)</code></p><p>连接关闭处理</p><div class="note info"><p>此处我们对消息的处理很简单,即在接受消息后发送给所有连接的用户,类似一个匿名群聊室.</p></div><h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p>完成了WebSocket处理类,还需要对其进行注册生效.这里有两种方式,择其一即可.</p><h6 id="创建配置类-并通过注解注册"><a href="#创建配置类-并通过注解注册" class="headerlink" title="创建配置类,并通过注解注册"></a>创建配置类,并通过注解注册</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocketConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//前台 可以使用websocket环境</span></span><br><span class="line">        registry.addHandler(myWebSocketHandler(),<span class="string">"/websocket"</span>).addInterceptors(<span class="keyword">new</span> HandshakeInterceptor()).setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//前台 不可以使用websocket环境，则使用sockjs进行模拟连接</span></span><br><span class="line">        registry.addHandler(myWebSocketHandler(), <span class="string">"/sockjs/websocket"</span>).addInterceptors(<span class="keyword">new</span> HandshakeInterceptor())</span><br><span class="line">                .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// websocket 处理类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketHandler <span class="title">myWebSocketHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>同时还需要配置上文提到过的Spring扫描配置类.</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描控制器,webSocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lhalcyon.king.controller,com.lhalcyon.king.socket"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="通过xml配置注册"><a href="#通过xml配置注册" class="headerlink" title="通过xml配置注册"></a>通过xml配置注册</h6><p><code>applicationContext-websocket.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:websocket</span>=<span class="string">"http://www.springframework.org/schema/websocket"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/websocket</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- websocket处理类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandler"</span> <span class="attr">class</span>=<span class="string">"com.lhalcyon.king.socket.MyWebSocketHandler"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 握手接口/拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.lhalcyon.king.socket.HandshakeInterceptor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">websocket:handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">websocket:mapping</span> <span class="attr">path</span>=<span class="string">"/websocket"</span> <span class="attr">handler</span>=<span class="string">"myHandler"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">websocket:handlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  注册 sockJS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">websocket:handlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">websocket:mapping</span> <span class="attr">path</span>=<span class="string">"/websocket"</span> <span class="attr">handler</span>=<span class="string">"myHandler"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">websocket:handshake-interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">websocket:sockjs</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">websocket:handlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上服务端代码实现基本完成,接下来对客户端测试页面做一个简单的实现.</p><h4 id="客户端页面"><a href="#客户端页面" class="headerlink" title="客户端页面"></a>客户端页面</h4><p><code>index.jsp</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"renderer"</span> content=<span class="string">"webkit"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 JQuery  --&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 sockJS  --&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js" &gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            var websocket;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 首先判断是否 支持 WebSocket</span></span><br><span class="line"></span><br><span class="line">            var url = <span class="string">'ws://'</span> + window.location.host + <span class="string">'/word-king/websocket'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'WebSocket'</span> in window) &#123;</span><br><span class="line">                websocket = <span class="keyword">new</span> WebSocket(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'MozWebSocket'</span> in window) &#123;</span><br><span class="line">                websocket = <span class="keyword">new</span> MozWebSocket(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                url = <span class="string">"http://"</span>+ window.location.host +<span class="string">"/word-king/sockjs/websocket"</span>;</span><br><span class="line">                websocket = <span class="keyword">new</span> SockJS(url);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 打开时</span></span><br><span class="line">            websocket.onopen = function(evnt) &#123;</span><br><span class="line">                console.log(<span class="string">"  websocket.onopen  "</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 处理消息时</span></span><br><span class="line">            websocket.onmessage = function(evnt) &#123;</span><br><span class="line">                $(<span class="string">"#msg"</span>).append(<span class="string">"&lt;p&gt;(&lt;font color='red'&gt;"</span> + evnt.data + <span class="string">"&lt;/font&gt;)&lt;/p&gt;"</span>);</span><br><span class="line">                console.log(<span class="string">"  websocket.onmessage   "</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            websocket.onerror = function(evnt) &#123;</span><br><span class="line">                alert(<span class="string">"onerror"</span>);</span><br><span class="line">                console.log(<span class="string">"  websocket.onerror  "</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            websocket.onclose = function(evnt) &#123;</span><br><span class="line">                console.log(<span class="string">"  websocket.onclose  "</span>);</span><br><span class="line">                alert(<span class="string">"onclose"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 点击了发送消息按钮的响应事件</span></span><br><span class="line">            $(<span class="string">"#TXBTN"</span>).click(function()&#123;</span><br><span class="line">                <span class="comment">// 获取消息内容</span></span><br><span class="line">                var text = $(<span class="string">"#tx"</span>).val();</span><br><span class="line">                <span class="comment">// 判断</span></span><br><span class="line">                <span class="keyword">if</span>(text == <span class="keyword">null</span> || text == <span class="string">""</span>)&#123;</span><br><span class="line">                    alert(<span class="string">" content  can not empty!!"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                var msg = &#123;</span><br><span class="line">                    msgContent: text,</span><br><span class="line">                    postsId: <span class="number">1</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                websocket.send(JSON.stringify(msg));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 最外边框 --&gt;</span><br><span class="line">&lt;div style=<span class="string">"margin: 20px auto; border: 1px solid blue; width: 300px; height: 500px;"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 消息展示框 --&gt;</span><br><span class="line">    &lt;div id="msg" style="width: 100%; height: 70%; border: 1px solid yellow;overflow: auto;"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 消息编辑框 --&gt;</span><br><span class="line">    &lt;textarea id="tx" style="width: 100%; height: 20%;"&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 消息发送按钮 --&gt;</span><br><span class="line">    &lt;button id="TXBTN" style="width: 100%; height: 8%;"&gt;发送数据&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是此处引入<code>JQuery</code>时,如果是本地的文件,可能存在无效的情况,需要去设置静态资源映射路径,可自行🔍解决.</p><p>本文采用的是引入在线地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 JQuery  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.5/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>地址写入后需Download下来</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1foh8b3cqscj318y056jsy.jpg" alt=""></p><p>代码不高亮警告后即能生效.</p><p>最后我们来看看效果</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1foh8i8249tg30m30i0tf2.gif" alt=""></p><hr><ol><li>参考: <a href="http://blog.csdn.net/mybook201314/article/details/70173674" target="_blank" rel="noopener">http://blog.csdn.net/mybook201314/article/details/70173674</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。 WebSocket通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。 在WebSocket API中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lhalcyon.com/categories/Java/"/>
    
    
      <category term="SpringMVC" scheme="https://lhalcyon.com/tags/SpringMVC/"/>
    
      <category term="WebSocket" scheme="https://lhalcyon.com/tags/WebSocket/"/>
    
      <category term="IM" scheme="https://lhalcyon.com/tags/IM/"/>
    
  </entry>
  
  <entry>
    <title>实现apk上传蒲公英后自动发送钉钉通知</title>
    <link href="https://lhalcyon.com/webhook_dingding-pgyer/"/>
    <id>https://lhalcyon.com/webhook_dingding-pgyer/</id>
    <published>2018-02-05T02:41:30.000Z</published>
    <updated>2018-02-13T10:12:09.924Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>Webhook是一个API概念，并且变得越来越流行。我们能用事件描述的事物越多，webhook的作用范围也就越大。Webhook作为一个轻量的事件处理应用，正变得越来越有用。</p><p>准确的说webhook是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p><p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p></div><p>在Android开发中会经常提交apk给测试人员进行测试,通常的做法是将构建完成的包上传至<a href="https://www.pgyer.com/" target="_blank" rel="noopener">蒲公英</a>,测试人员直接扫码下载并安装apk包从而进行测试.一般我们会将构建及发布过程自动化,可参考:</p><ol><li><a href="http://lhalcyon.com/linux-jenkins-gradle_build_android1/">Linux+Jenkins+Gradle构建Android参数化自动打包(一)</a></li><li><a href="http://lhalcyon.com/linux-jenkins-gradle_build_android2/">Linux+Jenkins+Gradle构建Android参数化自动打包(二)</a></li></ol><p>文章中实现了apk上传蒲公英后邮件通知,可是实际中,大家对邮件的关注远远没有对<code>IM</code>消息的关注度高,所以接下来本文将说明,实现<strong>上传apk后自动发送钉钉消息,将更新内容,apk版本号等信息通知到测试人员</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fo5p9j5pi0j30bs0ckjtu.jpg" alt=""></p><a id="more"></a><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>首先环境搭建是<code>IntelliJ+SpringMVC+Gradle</code>构建的,如有疑问的同学可参考<a href="http://lhalcyon.com/ssm_build/">IDEA+Gradle创建MyBatis+SpringMVC项目</a>,项目中主要是对接口数据的调整及转发,实际上未用到<code>MyBatis</code>,可自行进行去除🙄.</p><h4 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h4><p>对照<a href="https://www.pgyer.com/doc/view/webhook_introduction" target="_blank" rel="noopener">蒲公英doc</a>、<a href="https://open-doc.dingtalk.com/docs/doc.htm?treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="noopener">钉钉doc</a>分别建立Java Bean.</p><p><code>PgyerMessage</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"action"</span>: <span class="string">"应用更新"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"OooPlay"</span>,</span><br><span class="line">  <span class="attr">"link"</span>: <span class="string">"https://www.pgyer.com/oooplay_test"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"您的应用OooPlay有了新的版本(2.4)更新。"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"updateVersion"</span>,</span><br><span class="line">  <span class="attr">"os_version"</span>: <span class="string">"2.4"</span>,</span><br><span class="line">  <span class="attr">"build_version"</span>: <span class="string">"139"</span>,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2015-10-09 11:25:16"</span>,</span><br><span class="line">  <span class="attr">"updated"</span>: <span class="string">"2015-10-09 11:25:16"</span>,</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="number">1444361118</span>,</span><br><span class="line">  <span class="attr">"appsize"</span>: <span class="string">"2238036"</span>,</span><br><span class="line">  <span class="attr">"device_type"</span>: 'iOS',</span><br><span class="line">  <span class="attr">"notes"</span>: <span class="string">"修复了一些小弱智的小bug"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PgyerMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String action;</span><br><span class="line">    <span class="keyword">public</span> String title;</span><br><span class="line">    <span class="keyword">public</span> String link;</span><br><span class="line">    <span class="keyword">public</span> String message;</span><br><span class="line">    <span class="keyword">public</span> String type;</span><br><span class="line">    <span class="keyword">public</span> String os_version;</span><br><span class="line">    <span class="keyword">public</span> String build_version;</span><br><span class="line">    <span class="keyword">public</span> String created;</span><br><span class="line">    <span class="keyword">public</span> String updated;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> timestamp;</span><br><span class="line">    <span class="keyword">public</span> String appsize;</span><br><span class="line">    <span class="keyword">public</span> String device_type;</span><br><span class="line">    <span class="keyword">public</span> String notes;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PgyerMessage&#123;"</span> +</span><br><span class="line">                <span class="string">"action='"</span> + action + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", title='"</span> + title + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", link='"</span> + link + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", message='"</span> + message + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", type='"</span> + type + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", os_version='"</span> + os_version + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", build_version='"</span> + build_version + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", created='"</span> + created + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", updated='"</span> + updated + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", timestamp="</span> + timestamp +</span><br><span class="line">                <span class="string">", appsize='"</span> + appsize + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", device_type='"</span> + device_type + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", notes='"</span> + notes + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处有个小技巧,<code>IDEA IntelliJ</code>有个好用的插件<code>GsonFormat</code>可一键将<code>Json</code>字符串转换为<code>Java Model</code></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fo5h69y1fmg30m20fnnbx.gif" alt=""></p><p>钉钉消息则分为几种类型,具体举例可参考<a href="https://open-doc.dingtalk.com/docs/doc.htm?treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="noopener">钉钉doc</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_LINK = <span class="string">"link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_MARKDOWN = <span class="string">"markdown"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_TEXT = <span class="string">"text"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ACTIONCARD = <span class="string">"actionCard"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_FEEDCARD = <span class="string">"feedCard"</span>;</span><br></pre></td></tr></table></figure><p>此处我们选择<code>markdown</code>类型.为了便于拓展,此处将消息抽取了个基类<code>BaseDingMessage</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDingMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_LINK = <span class="string">"link"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_MARKDOWN = <span class="string">"markdown"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_TEXT = <span class="string">"text"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ACTIONCARD = <span class="string">"actionCard"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_FEEDCARD = <span class="string">"feedCard"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String msgtype;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> AtBean at;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AtBean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> isAtAll;</span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; atMobiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessage</span>  <span class="keyword">extends</span> <span class="title">BaseDingMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MarkdownBean markdown;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String title;</span><br><span class="line">        <span class="keyword">public</span> String text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先在<code>build.gradle</code>中导入依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'com.alibaba'</span>, <span class="string">name:</span> <span class="string">'fastjson'</span>, <span class="string">version:</span> <span class="string">'1.2.45'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'com.squareup.okhttp3'</span>, <span class="string">name:</span> <span class="string">'okhttp'</span>, <span class="string">version:</span> <span class="string">'3.9.0'</span></span><br></pre></td></tr></table></figure><p><code>fastjson</code>是用力啊转化<code>json</code>,<code>okhttp</code>用来网络请求</p><p><code>spring-mvc.xml</code>加入json配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lhalcyon.webhook.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/xml;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/statics/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消息发送服务<code>DingServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingServiceImpl</span> <span class="keyword">implements</span> <span class="title">DingService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(DingServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(BaseDingMessage message,String url)</span> </span>&#123;</span><br><span class="line">        MediaType jsonType = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        okhttp3.RequestBody body = okhttp3.RequestBody.create(jsonType, JSON.toJSONString(message));</span><br><span class="line">        <span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build();</span><br><span class="line">        OkHttpClient client = OkhttpProvider.get();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.newCall(request).execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>蒲公英请求控制器<code>PgyerController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pgyer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PgyerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DingService dingService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(PgyerController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseDingMessage <span class="title">apkUpdate</span><span class="params">(@RequestBody PgyerMessage pgyerMessage)</span></span>&#123;</span><br><span class="line">        BaseDingMessage dingMessage = WebhookConverter.pgyer2Ding(pgyerMessage);</span><br><span class="line">        dingService.send(dingMessage, Urls.DING_TEST);</span><br><span class="line">        logger.info(dingMessage);</span><br><span class="line">        <span class="keyword">return</span> dingMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>Urls.DING_TEST</code>为钉钉机器人的会话token地址,后面会说明如何创建/获取</p><p>消息转换器<code>WebhookConverter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebhookConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(WebhookConverter.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarkdownMessage <span class="title">pgyer2Ding</span><span class="params">(PgyerMessage pgyerMessage)</span></span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line">        message.msgtype = BaseDingMessage.TYPE_MARKDOWN;</span><br><span class="line">        message.markdown = <span class="keyword">new</span> MarkdownMessage.MarkdownBean();</span><br><span class="line">        message.markdown.title = pgyerMessage.device_type + <span class="string">"蒲公英更新"</span>;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.append(<span class="string">"#### "</span>).append(pgyerMessage.device_type).append(<span class="string">"测试包已更新! \n\n"</span>)</span><br><span class="line">        .append(<span class="string">"###### version: "</span>).append(pgyerMessage.os_version).append(<span class="string">" | build "</span>).append(pgyerMessage.build_version).append(<span class="string">"\n\n"</span>)</span><br><span class="line">        .append(<span class="string">"更新内容:\n"</span>).append(<span class="string">"&gt; "</span>).append(pgyerMessage.notes).append(<span class="string">"\n\n"</span>)</span><br><span class="line">        .append(<span class="string">"![qr_code_test](图片地址)\n\n"</span>)</span><br><span class="line">        .append(<span class="string">"[下载地址](https://www.pgyer.com/你的apk地址) 密码:你的密码\n"</span>).append(<span class="string">" @18810100000 @18810100001 @18818100002 "</span>);</span><br><span class="line"></span><br><span class="line">        message.markdown.text = builder.toString();</span><br><span class="line">        message.at = <span class="keyword">new</span> BaseDingMessage.AtBean();</span><br><span class="line">        message.at.isAtAll = <span class="keyword">false</span>;</span><br><span class="line">        message.at.atMobiles = Arrays.asList(<span class="string">"18818100000"</span>,<span class="string">"18818100001"</span>,<span class="string">"18818100002"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上需自行修改内容.</p><p>然后创建钉钉机器人.创建四连</p><p><strong>1</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fo6gzkjikoj3090020wem.jpg" alt=""></p><p><strong>2</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fo6gzmv1ouj30ic02o3yo.jpg" alt=""></p><p><strong>3</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fo6gzpzdxtj30ib0ezq4b.jpg" alt=""></p><p><strong>4</strong></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fo6hhbxrdvj30id0eyjs7.jpg" alt=""></p><p>点此复制钉钉机器人会话token,建立<code>Urls.java</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Urls</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提测群机器人token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String DING_TEST = <span class="string">"钉钉token"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的<code>Ding_Test</code>即为上面复制的地址</p><p>至此,代码主要实现类已经完成,接下来需要去配置蒲公英<code>webhook</code></p><h4 id="配置webhook"><a href="#配置webhook" class="headerlink" title="配置webhook"></a>配置webhook</h4><p>打开<a href="https://www.pgyer.com/" target="_blank" rel="noopener">蒲公英</a>应用设置</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fo6hs1ezmcj31220ifwgj.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fo6hylvq9ij30jw0dnq3q.jpg" alt=""></p><p>创建webhook,写入<code>PgyerController</code>的更新请求地址,如果配置与本文的相同,地址则为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://你的地址:端口/webhook-1.0-SNAPSHOT/pgyer/update</span><br></pre></td></tr></table></figure><p>其中<code>webhook-1.0-SNAPSHOT</code>为war包在tomcat解压后的名称</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fo6huk9u4yj30bo05rt9a.jpg" alt=""></p><p>done!  之后只要上传成功后,即有钉钉消息通知并@测试人员了! </p><p>让我们再看下打包后的消息通知!</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fo5p9j5pi0j30bs0ckjtu.jpg" alt=""></p><p>类似的,代码<code>push</code>,<code>merge</code>也可以做成webhook消息.</p><p><code>Github</code>、<code>Gitlab</code>既有成熟的对接机器人.而笔者使用的<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>是没有与钉钉做对接的,此时可自定义机器人实现,有兴趣的同学可参考上面的教程自行实现.</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fo710z7ywvj309t070aa2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Webhook是一个API概念，并且变得越来越流行。我们能用事件描述的事物越多，webhook的作用范围也就越大。Webhook作为一个轻量的事件处理应用，正变得越来越有用。&lt;/p&gt;
&lt;p&gt;准确的说webhook是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。&lt;/p&gt;
&lt;p&gt;Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;在Android开发中会经常提交apk给测试人员进行测试,通常的做法是将构建完成的包上传至&lt;a href=&quot;https://www.pgyer.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;蒲公英&lt;/a&gt;,测试人员直接扫码下载并安装apk包从而进行测试.一般我们会将构建及发布过程自动化,可参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://lhalcyon.com/linux-jenkins-gradle_build_android1/&quot;&gt;Linux+Jenkins+Gradle构建Android参数化自动打包(一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lhalcyon.com/linux-jenkins-gradle_build_android2/&quot;&gt;Linux+Jenkins+Gradle构建Android参数化自动打包(二)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文章中实现了apk上传蒲公英后邮件通知,可是实际中,大家对邮件的关注远远没有对&lt;code&gt;IM&lt;/code&gt;消息的关注度高,所以接下来本文将说明,实现&lt;strong&gt;上传apk后自动发送钉钉消息,将更新内容,apk版本号等信息通知到测试人员&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fo5p9j5pi0j30bs0ckjtu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Webhook" scheme="https://lhalcyon.com/categories/Webhook/"/>
    
    
      <category term="Dingding" scheme="https://lhalcyon.com/tags/Dingding/"/>
    
      <category term="Webhook" scheme="https://lhalcyon.com/tags/Webhook/"/>
    
      <category term="Pgyer" scheme="https://lhalcyon.com/tags/Pgyer/"/>
    
  </entry>
  
  <entry>
    <title>Linux升级Glibc2.14中文乱码</title>
    <link href="https://lhalcyon.com/update_glibc_issue/"/>
    <id>https://lhalcyon.com/update_glibc_issue/</id>
    <published>2018-02-01T02:28:00.000Z</published>
    <updated>2018-02-04T08:03:16.352Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p><code>CenterOS</code>上默认的<code>Glibc</code>版本为<code>2.12.1</code>,由于我们的Android项目使用到了<code>JNI</code>,将项目构建部署在服务器上时会遇到问题<code>&#39;GLIBC_2.14&#39; not found</code>,那么就需要升级<code>Glibc</code>至<code>2.14</code>.升级的教程网上很多,可是却漏掉了一个步骤,导致后面中文乱码的问题.本篇会做一个全面的解说</p></div><a id="more"></a><h4 id="1-Glibc下载"><a href="#1-Glibc下载" class="headerlink" title="1. Glibc下载"></a>1. Glibc下载</h4><p>首先从<a href="http://www.gnu.org/software/libc/" target="_blank" rel="noopener">Glibc Download</a>下载包,这里选择是<a href="http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.gz" target="_blank" rel="noopener">Glibc 2.14</a></p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p>上传至服务器,进入目录解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf glibc-2.14.tar.gz</span><br></pre></td></tr></table></figure><p>进入解压后的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd glibc-2.14</span><br></pre></td></tr></table></figure><p>接着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/build</span><br><span class="line">cd build</span><br><span class="line">../configure --prefix=/opt/glibc-2.14</span><br><span class="line">make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>若顺利的话,至此则安装成功了.</p><h5 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h5><p><strong>1. 在make install过程中出现错误:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can&apos;t open configuration file /opt/glibc-2.14/etc/ld.so.conf: No such file or directory</span><br></pre></td></tr></table></figure><p>缺少了报错的编译文件<code>ld.so.conf</code>.通过find命令找到对应的文件配置</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo0wcs8mt3j30ap00vt8t.jpg" alt=""></p><p>然后拷贝文件至对应文件目录,继续编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/ld.so.conf /opt/glibc-2.14/etc/ </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编译成功,接着定义下环境变量即可</p><h4 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h4><div class="note warning"><p>通常的教程至此就结束了.最初笔者参考网上的教程也是做到这里.当时跑程序也没问题,直到前段时间大楼停电,服务器重启后,通过服务器上<code>Jenkins</code>打包上传到蒲公英的中文信息全是乱码! 相当于服务器的编码文件丢失了,所有中文都会乱码.</p><p>是因为遗漏了<code>localedata</code>未编译,在服务器重启后,<code>Glibc2.14</code>找不到对应版本<code>2.14</code>的<code>glibc locale</code>文件.</p></div><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fo0rvnge0hj30es0363yp.jpg" alt=""></p><p>正确操作是,在<code>make</code>&amp;<code>make install</code>完成后继续编译local包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make localedata/install-locales</span><br></pre></td></tr></table></figure><p>编译需要一些时间,完成后重启服务器即可生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><hr><ol><li>参考: <a href="http://blog.csdn.net/clirus/article/details/62425498" target="_blank" rel="noopener">http://blog.csdn.net/clirus/article/details/62425498</a></li><li>参考: <a href="http://blog.csdn.net/fzuzhanghao1993/article/details/77650500" target="_blank" rel="noopener">http://blog.csdn.net/fzuzhanghao1993/article/details/77650500</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;&lt;code&gt;CenterOS&lt;/code&gt;上默认的&lt;code&gt;Glibc&lt;/code&gt;版本为&lt;code&gt;2.12.1&lt;/code&gt;,由于我们的Android项目使用到了&lt;code&gt;JNI&lt;/code&gt;,将项目构建部署在服务器上时会遇到问题&lt;code&gt;&amp;#39;GLIBC_2.14&amp;#39; not found&lt;/code&gt;,那么就需要升级&lt;code&gt;Glibc&lt;/code&gt;至&lt;code&gt;2.14&lt;/code&gt;.升级的教程网上很多,可是却漏掉了一个步骤,导致后面中文乱码的问题.本篇会做一个全面的解说&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lhalcyon.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://lhalcyon.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IDEA+Gradle创建MyBatis+SpringMVC项目</title>
    <link href="https://lhalcyon.com/ssm_build/"/>
    <id>https://lhalcyon.com/ssm_build/</id>
    <published>2018-01-29T01:58:20.000Z</published>
    <updated>2018-02-04T08:03:00.288Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建工具.它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置,抛弃了基于XML的各种繁琐配置.</p><p>IDEA 全称IntelliJ IDEA,是java语言开发的集成环境,IntelliJ在业界被公认为最好的java开发工具之一,尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的.</p></div><a id="more"></a><p>以上为百度的简介.从事Android的童鞋应该不难发现<code>Gradle</code>以及<code>Android Studio</code>的强(hen)大(ka).🤫而<code>AS</code>是基于<code>IntelliJ IDEA</code>开发的.习惯了<code>Gradle</code>的便捷,于是开始基于<code>Gradle</code>+<code>IDEA</code>构建<code>Java</code>项目.</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><h5 id="1-数据库MySql"><a href="#1-数据库MySql" class="headerlink" title="1. 数据库MySql"></a>1. 数据库MySql</h5><p>在<a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">MySql Downloads</a>下载对应的版本并安装</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnyn5efs2vj306t05st8w.jpg" alt=""></p><div class="note warning"><p>此处笔者在<code>macOS</code>上安装<code>5.7.21</code>后打开系统偏好设置,遇到<code>无法加载MySql面板</code>的问题.一番搜索🔍后发现是macOS版本与MySql不兼容,选择低版本的MySql如<code>5.6.39</code>即可.</p></div><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fnyncy23rdj30r404ndg9.jpg" alt=""></p><h5 id="2-IntelliJ-IDEA"><a href="#2-IntelliJ-IDEA" class="headerlink" title="2. IntelliJ IDEA"></a>2. IntelliJ IDEA</h5><p>请自行安(po)装(jie).</p><h5 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h5><p>请自行下载解压.如若是<code>macOS</code>或是<code>Linux</code>上解压后需进入<code>bin</code>目录执行下命令<code>chmod u+x *.sh</code>修改权限</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>点击  Create New Project</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnynr052i2j30qc0kk75x.jpg" alt=""></p><p>选择基于Gradle的Java Web项目</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnyo6iusc6j30qc0kcjs5.jpg" alt=""></p><p>填写GroupId和ArtifactId</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnyo8vutcjj30qc0kcwfq.jpg" alt=""></p><p>选择gradle.可使用默认的,可使用本地的</p><p>接着选择项目目录,基本项目创建好了,接下来进入文件配置</p><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><p>首先创建<code>java</code>和<code>resources</code>目录,并且创建包以及<code>web.xml</code>.</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnyqetghs0j309b0b4aai.jpg" alt=""></p><h5 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#设置日志的级别，定义日志信息的输出目的</span><br><span class="line">log4j.rootLogger=DEBUG, A1 ,R</span><br><span class="line">#定义A1的输出目的地为控制台</span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">#布局为 PatternLayout 可以灵活地指定布局模式。</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">#设置输出格式</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH\:mm\:ss&#125; [%c]-[%p] %m%n</span><br><span class="line">#定义R的输出目的地为文件，并且文件大小到达指定尺寸的时候产生一个新的文件</span><br><span class="line">log4j.appender.R=org.apache.log4j.RollingFileAppender</span><br><span class="line">#设置输出的文件地址</span><br><span class="line">log4j.appender.R.File=/Users/xx/Documents/ServerLog</span><br><span class="line">#设置文件大小伟100 kb 文件到达100时，产生一个新文件，</span><br><span class="line">#MaxBackupIndex 最大记录的文件数为1 查过一个文件删除文件较早的。</span><br><span class="line">log4j.appender.R.MaxFileSize=100KB </span><br><span class="line">log4j.appender.R.MaxBackupIndex=1</span><br><span class="line">#以下和上面一样</span><br><span class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n</span><br></pre></td></tr></table></figure><p>以上输出文件地址自行更改</p><h5 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$&#123;jarDirection&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;driverClass&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;connectionURL&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;userId&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">"$&#123;modelPackage&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">"$&#123;src_main_java&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">"$&#123;sqlMapperPackage&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">"$&#123;src_main_java&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"$&#123;mapperPackage&#125;"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"$&#123;src_main_java&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 每一个数据库表都对应一个对应的table属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"book"</span> <span class="attr">domainObjectName</span>=<span class="string">"Book"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 生成的model类所在包</span><br><span class="line">modelPackage=com.lhalcyon.webhook.domain</span><br><span class="line"># 生成的mapper接口类所在包</span><br><span class="line">mapperPackage=com.lhalcyon.webhook.mapper</span><br><span class="line"># 生成的mapper xml文件所在包</span><br><span class="line">sqlMapperPackage=com.lhalcyon.webhook.mapper</span><br></pre></td></tr></table></figure><p>为了方便扫描,将mapper xml以及接口类放在了同一包下了 😕</p><h5 id="jdbc-mysql-properties"><a href="#jdbc-mysql-properties" class="headerlink" title="jdbc-mysql.properties"></a>jdbc-mysql.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 将jdbc.jarDirection后的内容更改为gradle下载的</span><br><span class="line"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示</span><br><span class="line">jdbc.jarDirection=/Users/ceyx/.gradle/caches/modules-2/files-2.1/mysql</span><br><span class="line">/mysql-connector-java/5.1.38/dbbd7cd309ce167ec8367de4e41c63c2c8593cc5</span><br><span class="line">/mysql-connector-java-5.1.38.jar</span><br><span class="line"></span><br><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/halcyon</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.pass=root</span><br></pre></td></tr></table></figure><p>自行填写jdbc.jarDirection路径</p><h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">group <span class="string">'com.lhalcyon'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    mybatisGenerator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取config文件夹中对应的配置文件</span></span><br><span class="line">ext&#123;</span><br><span class="line">    <span class="keyword">def</span> prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    file(<span class="string">"src/main/resources/config/mybatis/jdbc-mysql.properties"</span>)</span><br><span class="line">            .withInputStream &#123;</span><br><span class="line">        prop.load(it)</span><br><span class="line">    &#125;</span><br><span class="line">    file(<span class="string">"src/main/resources/config/mybatis/gradle.properties"</span>)</span><br><span class="line">            .withInputStream &#123;</span><br><span class="line">        prop.load(it)</span><br><span class="line">    &#125;</span><br><span class="line">    prop.each &#123;</span><br><span class="line">        project.extensions.add(<span class="string">"$it.key"</span>,it.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">'org.codehaus.groovy:groovy-all:2.3.11'</span></span><br><span class="line">    compile <span class="string">'jstl:jstl:1.2'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-aop:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-context:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-beans:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-web:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-webmvc:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-tx:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-jdbc:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'org.springframework:spring-test:4.2.4.RELEASE'</span></span><br><span class="line">    compile <span class="string">'mysql:mysql-connector-java:5.1.38'</span></span><br><span class="line">    compile <span class="string">'org.mybatis.generator:mybatis-generator-core:1.3.2'</span></span><br><span class="line">    compile <span class="string">'org.mybatis:mybatis-spring:1.2.3'</span></span><br><span class="line">    compile <span class="string">'org.mybatis:mybatis:3.3.0'</span></span><br><span class="line">    compile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'commons-dbcp'</span>, <span class="string">name:</span> <span class="string">'commons-dbcp'</span>, <span class="string">version:</span> <span class="string">'1.4'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.aspectj'</span>, <span class="string">name:</span> <span class="string">'aspectjweaver'</span>, <span class="string">version:</span> <span class="string">'1.8.13'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'log4j'</span>, <span class="string">name:</span> <span class="string">'log4j'</span>, <span class="string">version:</span> <span class="string">'1.2.17'</span></span><br><span class="line">    </span><br><span class="line">    mybatisGenerator <span class="string">'org.mybatis.generator:mybatis-generator-core:1.3.2'</span></span><br><span class="line">    mybatisGenerator <span class="string">'mysql:mysql-connector-java:5.1.38'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用ant创建一个自动生成MyBatis目录文件的task</span></span><br><span class="line">task mybatisGenerate &lt;&lt; &#123;</span><br><span class="line">    ant.properties[<span class="string">'targetProject'</span>] = projectDir.path</span><br><span class="line">    ant.properties[<span class="string">'jarDirection'</span>] = project[<span class="string">'jdbc.jarDirection'</span>]</span><br><span class="line">    ant.properties[<span class="string">'driverClass'</span>] = project[<span class="string">'jdbc.driverClassName'</span>]</span><br><span class="line">    ant.properties[<span class="string">'connectionURL'</span>] = project[<span class="string">'jdbc.url'</span>]</span><br><span class="line">    ant.properties[<span class="string">'userId'</span>] = project[<span class="string">'jdbc.user'</span>]</span><br><span class="line">    ant.properties[<span class="string">'password'</span>] = project[<span class="string">'jdbc.pass'</span>]</span><br><span class="line">    ant.properties[<span class="string">'src_main_java'</span>] = sourceSets.main.java.srcDirs[<span class="number">0</span>].path</span><br><span class="line">    ant.properties[<span class="string">'src_main_resources'</span>] = sourceSets.main.resources.srcDirs[<span class="number">0</span>].path</span><br><span class="line">    ant.properties[<span class="string">'modelPackage'</span>] = project[<span class="string">'modelPackage'</span>]</span><br><span class="line">    ant.properties[<span class="string">'mapperPackage'</span>] = project[<span class="string">'mapperPackage'</span>]</span><br><span class="line">    ant.properties[<span class="string">'sqlMapperPackage'</span>] = project[<span class="string">'sqlMapperPackage'</span>]</span><br><span class="line"></span><br><span class="line">    ant.taskdef(</span><br><span class="line"><span class="symbol">            name:</span> <span class="string">'mbgenerator'</span>,</span><br><span class="line"><span class="symbol">            classname:</span> <span class="string">'org.mybatis.generator.ant.GeneratorAntTask'</span>,</span><br><span class="line"><span class="symbol">            classpath:</span> configurations.mybatisGenerator.asPath</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    ant.mbgenerator(<span class="string">overwrite:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="symbol">            configfile:</span> <span class="string">'src/main/resources/config/mybatis/generatorConfig.xml'</span>,</span><br><span class="line"><span class="symbol">            verbose:</span> <span class="literal">true</span>) &#123;</span><br><span class="line">        propertyset &#123;</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'targetProject'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'jarDirection'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'userId'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'driverClass'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'connectionURL'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'password'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'src_main_java'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'src_main_resources'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'modelPackage'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'mapperPackage'</span>)</span><br><span class="line">            propertyref(<span class="string">name:</span> <span class="string">'sqlMapperPackage'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着<code>Sync</code>或者点击<code>Import Changes</code></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnyqi90urpj30d00bpgm1.jpg" alt=""></p><p>IDEA就会下载依赖包了.依赖版本号均源于<a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a></p><h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnzjop49bzj30kr0fs76u.jpg" alt=""></p><p>导入依赖后,则可直接创建spring相关xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lhalcyon.webhook.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/statics/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/statics/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a>applicationContext-dao.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config/mybatis/jdbc-mysql.properties"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.pass&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;property name="mapperLocations" value="classpath*:com/lhalcyon/mapper/*.xml"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Mapper扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.lhalcyon.webhook.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置包扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lhalcyon.webhook.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="applicationContext-trans-xml"><a href="#applicationContext-trans-xml" class="headerlink" title="applicationContext-trans.xml"></a>applicationContext-trans.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut</span>=<span class="string">"execution(* com.lhalcyon.webhook.service.*.*(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化spring 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index-dispather<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决post乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h4><p>Run-&gt;Edit Configurations</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnzmln11yij30tg0k1adg.jpg" alt=""></p><p>有fix项点击配置即可,然后运行.</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnzn37f1aoj30pn0fwmxz.jpg" alt=""></p><h4 id="MyBatis配置"><a href="#MyBatis配置" class="headerlink" title="MyBatis配置"></a>MyBatis配置</h4><p>数据库管理工具笔者使用的是</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnzowf9ux6j304e03nwej.jpg" alt=""></p><p>首先创建数据库<code>halcyon</code>,接着创建<code>book</code>表,用于后面的mybatis generator</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnzp5ws50uj30lc0ayabp.jpg" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book (</span><br><span class="line">book_id <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">book_name <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">author <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">'佚名'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后在gradle创建mybatis generator task</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fnzpb6bulwj30d50d5aap.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnzpcwz6psj30k1041mxk.jpg" alt=""></p><p>运行task</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fnzperdym0j30d40cfdgm.jpg" alt=""></p><p>运行成功后,会生成与数据库表对应的<code>java bean</code>与<code>dao</code>文件,即项目里的<code>Book.java</code>、<code>BookExample.java</code>、<code>BookMapper.xml</code>、<code>BookMapper.java</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnzpgj444lj307a04vjrn.jpg" alt=""></p><p><code>generatorConfig.xml</code>配置参数可自行搜索补充修改🤔.手动覆写下<code>Book</code>的<code>toString</code>方法方便日志输出</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>为了满足同时测试<code>Spring</code>、<code>SpringMVC</code>、<code>Mybatis</code>,笔者建立一个<code>Controller</code>通过<code>Get</code>请求进行<code>CURD</code>操作.</p><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        bookMapper.insert(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        bookMapper.updateByPrimaryKey(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BookExample example = <span class="keyword">new</span> BookExample();</span><br><span class="line">        <span class="keyword">return</span> bookMapper.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> bookId)</span> </span>&#123;</span><br><span class="line">        BookExample example = <span class="keyword">new</span> BookExample();</span><br><span class="line">        example.createCriteria().andBookIdEqualTo(bookId);</span><br><span class="line">        bookMapper.deleteByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  Logger logger = Logger.getLogger(BookController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/insert"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">(String bookName,String author)</span></span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setBookName(bookName);</span><br><span class="line">        book.setAuthor(author);</span><br><span class="line">        bookService.insertBook(book);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryStrings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateAuthor</span><span class="params">(<span class="keyword">int</span> bookId,String bookName,String author)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setBookId(bookId);</span><br><span class="line">        book.setBookName(bookName);</span><br><span class="line">        book.setAuthor(author);</span><br><span class="line">        bookService.updateBook(book);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryStrings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="keyword">int</span> bookId)</span></span>&#123;</span><br><span class="line">        bookService.deleteBookById(bookId);</span><br><span class="line">        <span class="keyword">return</span> queryStrings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/find_all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllBooks</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = bookService.getAllBooks();</span><br><span class="line">        logger.info(books);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> books.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">queryStrings</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Book&gt; allBooks = bookService.getAllBooks();</span><br><span class="line">        <span class="keyword">return</span> allBooks.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过请求地址,获得结果</p><p>插入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/webhook/insert?bookName=java&amp;author=jack</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnztpvs98uj30hs041mxn.jpg" alt=""></p><p>执行后直接将数据库中所有book记录输出,方便观察.</p><p>其它操作类似</p><p>更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/webhook/update?bookId=3&amp;bookName=go&amp;author=joe</span><br></pre></td></tr></table></figure><p>删除:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/webhook/delete?bookId=4</span><br></pre></td></tr></table></figure><p>查询(所有):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/webhook/find_all</span><br></pre></td></tr></table></figure><div class="note warning"><p>如若发生<code>500 Invalid bound statement (not found)</code>类似错误,一般是没有扫描到Mapper.xml.其中一种情况下是xml根本没被打包进war.需要在<code>build.gradle</code>中进行配置,并且配置后<code>Sync或Import Changes</code>,再重新用命令<code>./gradlew build</code>才可生效.</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//将src文件夹中的资源文件同时打包</span><br><span class="line">processResources &#123;</span><br><span class="line">    from(&apos;src/main/java&apos;) &#123;</span><br><span class="line">        include &apos;**/*.xml&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此SpringMVC+MyBatis+Gradle项目已经构建测试完毕.</p><p>代码已上传<a href="https://github.com/lhalcyon/ssm_basic/tree/master" target="_blank" rel="noopener">GayHub</a>,文章若对各位大佬有帮助,麻烦顺手点个star~ ❤️</p><p>各位可能发现了,<code>SSM</code>配置起来比较繁琐,相比之下,<code>SpringBoot</code>就精简了许多.后面有机会,我们再来细说 🤒</p><hr><ol><li>参考: <a href="https://www.cnblogs.com/bojuetech/p/5844413.html" target="_blank" rel="noopener">https://www.cnblogs.com/bojuetech/p/5844413.html</a></li><li>参考: <a href="http://blog.csdn.net/kingboyworld/article/details/78251425" target="_blank" rel="noopener">http://blog.csdn.net/kingboyworld/article/details/78251425</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建工具.它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置,抛弃了基于XML的各种繁琐配置.&lt;/p&gt;
&lt;p&gt;IDEA 全称IntelliJ IDEA,是java语言开发的集成环境,IntelliJ在业界被公认为最好的java开发工具之一,尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lhalcyon.com/categories/Java/"/>
    
    
      <category term="IntelliJ" scheme="https://lhalcyon.com/tags/IntelliJ/"/>
    
      <category term="Spring" scheme="https://lhalcyon.com/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="https://lhalcyon.com/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://lhalcyon.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio版本兼容Api警告</title>
    <link href="https://lhalcyon.com/as_warning/"/>
    <id>https://lhalcyon.com/as_warning/</id>
    <published>2017-09-25T02:10:12.000Z</published>
    <updated>2018-02-04T08:02:13.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-Studio版本兼容Api警告"><a href="#Android-Studio版本兼容Api警告" class="headerlink" title="Android Studio版本兼容Api警告"></a>Android Studio版本兼容Api警告</h2><div class="note info"><p>最近在开发中,组内的小伙伴在开发中使用了高版本SDK25的Api,但是我们的项目最低兼容14,因此测试在5.1上的手机直接就崩溃了,问其在开发中没有看到警告吗,回复说确实没看到.后来查究一下,他的工具上确实没有显示.本文简述下如何手动去调整兼容Api的提示等级,避免在开发中用到高版本的Api却不自察.</p></div><p>首先win电脑是打开<code>Android Studio</code>的 <code>Setting</code>  ,mac是打开<code>Android Studio</code>的 <code>Preferences</code></p><p>选择<code>Editor</code>中的<code>Inspections</code> 对<code>Calling new methods on older versions</code>进行勾选并且配置为<code>Error</code>级别</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_170925/as_inspection_api_compatible.png" alt="api_compatible"></p><p>如此简单即可搞定.如遇到其他警告,错误代码没提示也可类似进行操作配置.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-Studio版本兼容Api警告&quot;&gt;&lt;a href=&quot;#Android-Studio版本兼容Api警告&quot; class=&quot;headerlink&quot; title=&quot;Android Studio版本兼容Api警告&quot;&gt;&lt;/a&gt;Android Studio版本兼
      
    
    </summary>
    
      <category term="Android" scheme="https://lhalcyon.com/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="https://lhalcyon.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Xcode代码提示问题处理</title>
    <link href="https://lhalcyon.com/xcode-idiot/"/>
    <id>https://lhalcyon.com/xcode-idiot/</id>
    <published>2017-08-15T05:32:45.000Z</published>
    <updated>2018-02-04T08:02:27.836Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>最近在写<code>Swift</code>.对于笔者这种被<code>JetBrains</code>的几大IDE工具给惯坏的开发者,Xcode的代码提示真是无力吐槽,先不论智能提示度,就连基本的提示也经常出不来.这里就简单总结下iOS同事传授的几招解决办法</p></div><h3 id="1-Clean-Project"><a href="#1-Clean-Project" class="headerlink" title="1.Clean Project"></a>1.Clean Project</h3><p>最直接的办法就是清空项目.</p><p>可视化按钮入口再哪请自行查找,笔者一般是用<code>Command+Shift+K</code>进行清空,此方法一般有效,缺点是会重新编译项目,比较慢</p><h3 id="2-清空Xcode缓存"><a href="#2-清空Xcode缓存" class="headerlink" title="2.清空Xcode缓存"></a>2.清空Xcode缓存</h3><p>前往Xcode的缓存目录,清空项目编译缓存.</p><p>具体操作为右键Finder<code>前往文件夹</code>文件夹路径为<code>/用户/ceyx/资源库/Developer/Xcode/DerivedData</code>  其中<code>ceyx</code> 替换为自己的用户名,删除目录下所有文件,然后重新打开Xcode,编译.</p><p><strong>此方法比1更慢,往往也更有效</strong></p><h3 id="3-终极大招"><a href="#3-终极大招" class="headerlink" title="3.终极大招"></a>3.终极大招</h3><p>如若上述两种方法还无效,只能使用绝招了…重启Xcode,还不行就重启电脑… 笔者黔驴技穷了,只能充当下网吧老板传授下终极大招.👻</p><p>题外话,对于JetBrains出品的appcode还未尝试过,不知对于Xcode项目兼容到何程度,是否支持Cocoapod等,有时间会去体验下,希望至少在代码提示上能更友善些😀</p><p>笔者去体验了下Appcode,其代码提示和快捷键如Jetbrains其他产品一样非常智能,但是代码中偶有飘红,却可以成功运行,比较干扰编码.尤为尴尬的一点是,Appcode不支持storyboard,即在项目内点开storyboard文件就直接跳转xcode了😥. 如真的被Xcode逼疯的童鞋可以考虑下用AppCode编码,用Xcode操作storyboard</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;最近在写&lt;code&gt;Swift&lt;/code&gt;.对于笔者这种被&lt;code&gt;JetBrains&lt;/code&gt;的几大IDE工具给惯坏的开发者,Xcode的代码提示真是无力吐槽,先不论智能提示度,就连基本的提示也经常出不来.这里就简单总
      
    
    </summary>
    
      <category term="iOS" scheme="https://lhalcyon.com/categories/iOS/"/>
    
    
      <category term="Xcode" scheme="https://lhalcyon.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Linux+Jenkins+Gradle构建Android参数化自动打包(二)</title>
    <link href="https://lhalcyon.com/linux-jenkins-gradle_build_android2/"/>
    <id>https://lhalcyon.com/linux-jenkins-gradle_build_android2/</id>
    <published>2017-07-20T13:45:30.000Z</published>
    <updated>2018-02-08T13:43:56.045Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://lhalcyon.com/linux-jenkins-gradle_build_android1/">前一篇文章</a>中,说明了在CenterOS上进行一系列的环境搭建,本文开始说明关于项目的一系列配置</p><a id="more"></a><h3 id="Jenkins项目配置"><a href="#Jenkins项目配置" class="headerlink" title="Jenkins项目配置"></a>Jenkins项目配置</h3><p>首先创建一个项目,将构建保持的天数和个数进行限制</p><blockquote><p>此处感谢后台同事提示,因为Android SDK NDK 就特别占空间了,如果构建缓存不进行限制,则很快服务器空间就会不足🤥</p></blockquote><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/project_config_1.png" alt="jenkins_total"></p><h4 id="参数构建配置"><a href="#参数构建配置" class="headerlink" title="参数构建配置"></a>参数构建配置</h4><p><strong>打包环境</strong></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/param_env.jpg" alt="jenkins_total"></p><p><strong>分支指定</strong></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/param_branch.jpg" alt="jenkins_branch"></p><p><strong>email自定义接收者</strong></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/param_email.jpg" alt="jenkins_email"></p><p><strong>打包时间戳</strong></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/param_jenkins_time.jpg" alt="jenkins_total"></p><p>因为笔者的公司对打包的Apk名以及测试版本号时间戳显示的要求,因此需要使用动态参数</p><blockquote><p>还有其他参数均与以上类似,可自行配置</p></blockquote><p><strong>!!! 记住尤为重要的是这些参数都是Jenkins上配置的Gradle属性,得传递到App的Gradle中</strong></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/gradle_script2.png" alt="jenkins_email"></p><p>这里勾选<code>Pass all job parameters as Project properties</code></p><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><p>在<code>源码管理处配置Git账号</code></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/git_account.jpg" alt="jenkins_total"></p><p>这里的<code>*/${BRANCH}</code>对应参数配置时的<code>BRANCH</code>.为什么这里做成选择型参数呢,是因为分支名是未知的,做成填写的话,可能压根拉不到指定分支的代码🤐</p><h4 id="Gradle构建脚本"><a href="#Gradle构建脚本" class="headerlink" title="Gradle构建脚本"></a>Gradle构建脚本</h4><p>增加构建动作</p><p>这里<code>${WORKSPACE}</code>指的是Git拉下的根目录.途中马赛克位置则为项目根目录</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/gradle_script.jpg" alt="jenkins_total"></p><h4 id="蒲公英上传"><a href="#蒲公英上传" class="headerlink" title="蒲公英上传"></a>蒲公英上传</h4><p>增加构建动作,将Apk上传蒲公英</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/pgyer_upload.jpg" alt="jenkins_total"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -k -F &quot;file=@$&#123;WORKSPACE&#125;/source/项目根目录/app/apks/$&#123;BUILD_PREFIX&#125;_$&#123;JENKINS_TIME&#125;_$&#123;DAY_VERSION&#125;.apk&quot; -F &quot;uKey=你的ukey&quot; -F &quot;_api_key=你的apiKey&quot; -F &quot;installType=2&quot; -F &quot;password=下载密码&quot; -F &quot;updateDescription=$&#123;DESCRIPTION&#125;&quot; https://www.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure><blockquote><p> <code>${WORKSPACE}/source/项目根目录/app/apks/</code>为笔者自行修改的Apk输出目录,此处请根据自己的项目输入目录进行修改</p><p> curl命令如果使用不了可自行百度解决</p></blockquote><p>以下为蒲公英的上传Api,可以自行调整参数</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/pgyer_api.png" alt="jenkins_total"></p><h4 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h4><p>首先还是进入Jenkins-&gt;系统设置</p><p>在<code>Jenkins Location</code>中进行配置</p><p>Jenkins URL:<code>http://10.50.0.16:8777/jenkins/</code></p><p>系统管理员邮件地址: <code>Android参数化构建&lt;aaa@163.com&gt;</code></p><blockquote><p>此处<code>Android参数化构建</code>就为邮件中的发送人名称</p></blockquote><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/mail_config1.jpg" alt="jenkins_total"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/mail_config2.png" alt="jenkins_total"></p><blockquote><p>系统设置中的默认收件人最好不要配置为自己,因为如果配置后,自己就永远在收件人的前端,后面想发送给领导时,便不大好. 邮件的内容可自定义html内容,二维码直接线下生成蒲公英的地址然后贴在邮件内即可</p></blockquote><h3 id="App本地Gradle配置"><a href="#App本地Gradle配置" class="headerlink" title="App本地Gradle配置"></a>App本地Gradle配置</h3><p>首先在<code>gradle.properties</code>文件中进行参数化构建在非Jenkins写入情况时的缺省值配置</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/gradle_properties.png" alt="jenkins_total"></p><p>在未使用Jenkins构建的情况下应用会读本地的这些变量值</p><p>然后在<code>app</code>module下的<code>build.gradle</code>中进行配置写入的值配置</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/app_gradle.jpg" alt="jenkins_total"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//修改生成的apk名字及输出目录</span><br><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.each &#123; output -&gt;</span><br><span class="line">        def newName</span><br><span class="line">        def oldFile = output.outputFile</span><br><span class="line">        def outDirectory = oldFile.parent</span><br><span class="line">        def buildPrefix</span><br><span class="line">        def showVersion</span><br><span class="line">        if (variant.buildType.name == &apos;debug&apos;) &#123;</span><br><span class="line">            buildPrefix = BUILD_PREFIX</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            buildPrefix = BUILD_PREFIX_RELEASE</span><br><span class="line">        &#125;</span><br><span class="line">        def jenkinsTime = JENKINS_TIME</span><br><span class="line">        if (variant.buildType.name == &apos;debug&apos;) &#123;</span><br><span class="line">            showVersion = buildPrefix + &apos;_&apos; + jenkinsTime + &apos;_&apos; + DAY_VERSION</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            showVersion = APP_VERSION</span><br><span class="line">        &#125;</span><br><span class="line">        resValue(&quot;string&quot;, &apos;fund_app_version&apos;, showVersion)</span><br><span class="line">        def tempFile = file(&quot;build.gradle&quot;)</span><br><span class="line">        outDirectory = tempFile.parent + &apos;/apks&apos;</span><br><span class="line">        if (IS_JENKINS) &#123;</span><br><span class="line">            newName = buildPrefix + &apos;_&apos; + jenkinsTime + &apos;_&apos; + DAY_VERSION + &apos;.apk&apos;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            newName = &apos;android-v&apos; +</span><br><span class="line">                    APP_VERSION + &apos;-&apos; + variant.productFlavors[0].name + &apos;-&apos; + variant.buildType.name + &apos;.apk&apos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        output.outputFile = new File(outDirectory, newName)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统默认的输入路径是在<code>build</code>文件夹中,层级比较深.此处笔者将apk的输出路径进行了修改并且对apk的输出名称进行了调整</p><p>至此,Jenkins参数自动化构建已经完成!😀</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://lhalcyon.com/linux-jenkins-gradle_build_android1/&quot;&gt;前一篇文章&lt;/a&gt;中,说明了在CenterOS上进行一系列的环境搭建,本文开始说明关于项目的一系列配置&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lhalcyon.com/categories/Android/"/>
    
    
      <category term="Jenkins" scheme="https://lhalcyon.com/tags/Jenkins/"/>
    
      <category term="Android" scheme="https://lhalcyon.com/tags/Android/"/>
    
      <category term="Linux" scheme="https://lhalcyon.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux+Jenkins+Gradle构建Android参数化自动打包(一)</title>
    <link href="https://lhalcyon.com/linux-jenkins-gradle_build_android1/"/>
    <id>https://lhalcyon.com/linux-jenkins-gradle_build_android1/</id>
    <published>2017-07-07T12:40:25.000Z</published>
    <updated>2018-02-06T12:50:41.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note info"><p>关于Jenkins部署安卓自动打包有很多好处,可以配置参数进行构建,选择打包环境、设置App版本、设置加密开关等.起初,笔者也是参考了一些网上的教程,将自动化打包构建在了自己的windows开发机器上,而将Jenkins自动构建Android部署在服务器上和本机上在环境构建方面略有不同,坑略多.</p><p>参数化构建的过程却是很便捷,但是部署在本机上自动化打包其实是个会增加打包时长的工作,因为自动化打包会首先去代码仓库拉取代码到本地,然后再开始打包,这个过程会比直接用AS打包慢很多.后来提出需求,要将自动化打包配置到服务器上.运维就提供了一台<code>Linux</code>服务器,并且上面已配置后台的自动化打包环境,用的是<code>Jdk1.7</code>和比较旧版本的<code>Jenkins</code>,于是我们得另行使用独立的安装的环境.</p></div><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>最终我们要实现的是实现Jenkins上面配置<strong>应用版本号</strong>、<strong>Git分支</strong>、<strong>应用渠道</strong>、<strong>请求基地址</strong>、<strong>应用环境</strong>等参数,进行一键参数化构建打包上传至蒲公英并发送邮件通知给<strong>自定义的接收者</strong></p><p>最终实现参数化配置大致如下所示:</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_total.png" alt="jenkins_total"></p><p>发送邮件(邮件内容较长,进行了相应缩小)</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_result.jpg" alt="jenkins_total"></p><a id="more"></a><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong>所需环境</strong></p><ul><li>新版Jenkins(需能安装参数化构建插件)</li><li>Tomcat</li><li>新版Jenkins</li><li>Android SDK</li><li>Android NDK</li><li>aapt</li><li>Git</li><li>Gradle</li><li>其它(视自身项目所需)</li></ul><p><strong>CenterOS64位已有环境</strong></p><ul><li>Jdk1.7</li><li>Tomcat</li><li>旧版Jenkins</li></ul><h4 id="1-Jdk安装及配置"><a href="#1-Jdk安装及配置" class="headerlink" title="1. Jdk安装及配置"></a>1. Jdk安装及配置</h4><p>由于Android开发使用的 <code>Jdk1.8</code>,因此不能复用服务器上现有的Jdk </p><p>首先去<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle Downloads</a>下载 <strong>Jdk for Linux</strong>.笔者下载的是<code>jdk-8u131-linux-x64.tar.gz</code></p><p>上传到服务器,进入相关目录解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u131-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>可将目录移至其他目录.其实最好在解压前就将压缩包移至目标目录</p><p><strong>Jdk环境变量配置</strong>(可选)</p><p>由于后台使用了<code>JAVA_HOME</code>、<code>JENKINS_HOME</code>等一系列环境变量名,所以服务器上默认调用的会是他们的环境变量,我们开发的一套只能在自己的Tomcat、Jenkins中进行指定,具体下文会进行说明</p><h4 id="2-Tomcat安装及配置"><a href="#2-Tomcat安装及配置" class="headerlink" title="2. Tomcat安装及配置"></a>2. Tomcat安装及配置</h4><p>首先去<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat Download</a>选择版本进行下载.这里笔者选择的是<code>apache-tomcat-7.0.79.tar.gz</code></p><p>上传到服务器,进入相关目录解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxv -f apache-tomcat-7.0.79.tar.gz</span><br></pre></td></tr></table></figure><h5 id="a-端口修改"><a href="#a-端口修改" class="headerlink" title="a.端口修改"></a>a.端口修改</h5><p>由于常规tomcat端口被已有tomcat占用,因此我们需要修改端口</p><p>进入<code>conf</code>目录下的<code>server.xml</code>修改,此处笔者是用<strong>Vim</strong>修改.不会用的同学请出门左转度娘🤔</p><p>主要修改的是,设置为自定义端口号</p><ul><li><code>Tomcat admin port</code> 即文件最上面的端口号</li><li><code>Http/1.1 port</code> 连接访问的端口号</li><li><code>AJP/1.3 port</code></li></ul><h5 id="b-环境配置"><a href="#b-环境配置" class="headerlink" title="b.环境配置"></a>b.环境配置</h5><p>指定Tomcat运行时环境,在<code>bin</code>目录下修改<code>setclasspath.sh</code> 以下是笔者的环境,请自行替换路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/android/java/jdk1.8.0_131</span><br><span class="line">export JRE_HOME=/usr/android/java/jdk1.8.0_131/jre</span><br><span class="line">export JENKINS_HOME=/home/android/jenkins</span><br></pre></td></tr></table></figure><h4 id="3-Gradle安装及配置"><a href="#3-Gradle安装及配置" class="headerlink" title="3. Gradle安装及配置"></a>3. Gradle安装及配置</h4><p>首先去<a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">Gradle Download</a>下载对应Gradle版本,笔者使用到的是<code>gradle-3.3-all.zip</code></p><p>上传到指定目录解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip gradle-3.3-all.zip</span><br></pre></td></tr></table></figure><p>然后添加环境变量<code>vim /etc/profile</code>,在环境变量配置处增加一句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GRADLE_HOME=/home/gradle-3.3/bin</span><br></pre></td></tr></table></figure><h4 id="4-Android-Sdk-For-Linux-安装及更新"><a href="#4-Android-Sdk-For-Linux-安装及更新" class="headerlink" title="4. Android Sdk For Linux 安装及更新"></a>4. Android Sdk For Linux 安装及更新</h4><p>这里下载Sdk解压都不是难点.难点在于安装之后更新的问题.</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/sdk_manager_accept_license.png" alt="sdk_manager_agree_license"></p><p>用AS或者Eclipse的同学肯定接触过<code>Sdk Manager</code>,此处选择更新后要手动点<code>Accept License</code>才能启动更新.但是在Linux下没有界面化的勾选可用.因此需要用脚本来更新.网上有说复制<code>License</code>的方法笔者试了无效,也许是姿势不对吧,此处也是踩了很久的坑才搜出来的解决方法:</p><p><a href="http://blog.csdn.net/yygydjkthh/article/details/48263973" target="_blank" rel="noopener">更新Sdk方法传送门</a> 这里先感谢下该作者👏</p><p>这里也为不愿跳传送门的同学说明一下,就几个步骤.</p><p><strong>a.查看可更新列表</strong></p><p>在Sdk的<code>tools</code>目录使用<code>./android list sdk --all</code>查看远程服务器提供的Sdk包的序号,记录想要更新的Sdk序号</p><p><strong>b.编辑脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line">set timeout -1</span><br><span class="line">spawn /usr/local/android-sdk-linux/tools/android update sdk -u -a -t 1,2,3,24,25,26,27,28,30,95,96,102,103,104,105,106,107</span><br><span class="line">expect &#123;</span><br><span class="line">    &quot;Do you accept the license&quot; &#123; exp_send &quot;y\r&quot; ; exp_continue &#125;</span><br><span class="line">    eof</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处<code>1,2,3,...</code>为需要下载的Sdk序号</p><p><strong>c.运行脚本</strong></p><p>待脚本跑完,sdk就更新完毕了</p><blockquote><p>注意此处脚本用到了<code>expect</code>,需要在服务器上安装,此处提供<a href="http://www.centoscn.com/image-text/install/2014/0310/2532.html" target="_blank" rel="noopener">expect安装传送门</a></p></blockquote><h4 id="5-Ndk-for-Linux安装"><a href="#5-Ndk-for-Linux安装" class="headerlink" title="5. Ndk for Linux安装"></a>5. Ndk for Linux安装</h4><p>安装较简单,后续需配置Jenkins系统变量,下文会进行说明</p><blockquote><p>项目因用到了Jni,需要安装Ndk,可是后期发现在项目里每次均去编译jni导致项目的compile sdk不能使用高于23的,致使Instant Run等功能使用,很影响开发效率.后期改在项目外编译好了静态库然后放入项目中,这样不会限制项目自身的SDK版本,因此<strong>若未使用JNI的项目,则可跳过此步骤</strong></p></blockquote><h4 id="6-Git安装及环境变量配置"><a href="#6-Git安装及环境变量配置" class="headerlink" title="6. Git安装及环境变量配置"></a>6. Git安装及环境变量配置</h4><p>下载安装并配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GIT_HOME=/usr/android/git-2.12.2/bin</span><br></pre></td></tr></table></figure><h4 id="7-Jenkins安装及配置"><a href="#7-Jenkins安装及配置" class="headerlink" title="7. Jenkins安装及配置"></a>7. Jenkins安装及配置</h4><h5 id="a-下载"><a href="#a-下载" class="headerlink" title="a. 下载"></a>a. 下载</h5><p>下载Jenkins将war包放入Tomcat的<code>webapps</code>目录下,启动tomcat</p><p>然后在地址栏输入路径<code>http://localhost:/8777</code> 其中<code>8777</code>为第二步中自定义的端口号</p><h5 id="b-插件安装"><a href="#b-插件安装" class="headerlink" title="b. 插件安装"></a>b. 插件安装</h5><p>然后安装插件(基本参考网上的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.Branch API Plugin</span><br><span class="line">2.build timeout plugin</span><br><span class="line">3.build-name-setter</span><br><span class="line">4.Credentials Binding Plugin</span><br><span class="line">5.description setter plugin</span><br><span class="line">6.Dynamic Parameter Plug-in</span><br><span class="line">7.Environment Injector Plugin</span><br><span class="line">9.Git plugin</span><br><span class="line">10.GIT server Plugin</span><br><span class="line">11.Gradle Plugin</span><br><span class="line">12.Git Parameter Plug-In</span><br><span class="line">13.Pipeline: Basic Steps</span><br><span class="line">14.Pipeline: Build Step</span><br><span class="line">15.Pipeline: Input Step</span><br><span class="line">16.Pipeline: Nodes and Processes</span><br><span class="line">17.Pipeline: Stage Step</span><br><span class="line">18.Scriptler</span><br><span class="line">19.Workspace Cleanup Plugin</span><br><span class="line">20.Post-Build Script Plug-in</span><br><span class="line">21.Email Extension Plugin</span><br><span class="line">22.SSH Slaves plugin</span><br><span class="line">23.Timestamper</span><br><span class="line">(不明为什么少8)</span><br></pre></td></tr></table></figure><p>因为Jenkins版本不同,实际使用中发现缺失不少</p><p>以下附上笔者所安装的所有插件(若无问题的可跳过)</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin1.jpg" alt="jenkins_plugin_1"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin2.jpg" alt="jenkins_plugin_2"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin3.jpg" alt="jenkins_plugin_3"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin4.jpg" alt="jenkins_plugin_4"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin5.jpg" alt="jenkins_plugin_5"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin6.jpg" alt="jenkins_plugin_6"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin7.jpg" alt="jenkins_plugin_7"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_plugin8.jpg" alt="jenkins_plugin_8"></p><h5 id="c-环境变量配置"><a href="#c-环境变量配置" class="headerlink" title="c. 环境变量配置"></a>c. 环境变量配置</h5><p><strong>环境变量</strong></p><p>首先点击<code>系统管理</code>-&gt;<code>系统设置</code>配置Jdk、Android Sdk、Gradle、Android Ndk环境变量(此处也可配置Git目录,笔者是将Git目录配置在Linux环境变量中了)</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_config.png" alt="jenkins_plugin_8"></p><p><em>其它如邮件相关配置的在下篇会说明</em></p><p>至此环境大体上配置已经完成,下篇即可进入项目相关配置</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;关于Jenkins部署安卓自动打包有很多好处,可以配置参数进行构建,选择打包环境、设置App版本、设置加密开关等.起初,笔者也是参考了一些网上的教程,将自动化打包构建在了自己的windows开发机器上,而将Jenkins自动构建Android部署在服务器上和本机上在环境构建方面略有不同,坑略多.&lt;/p&gt;
&lt;p&gt;参数化构建的过程却是很便捷,但是部署在本机上自动化打包其实是个会增加打包时长的工作,因为自动化打包会首先去代码仓库拉取代码到本地,然后再开始打包,这个过程会比直接用AS打包慢很多.后来提出需求,要将自动化打包配置到服务器上.运维就提供了一台&lt;code&gt;Linux&lt;/code&gt;服务器,并且上面已配置后台的自动化打包环境,用的是&lt;code&gt;Jdk1.7&lt;/code&gt;和比较旧版本的&lt;code&gt;Jenkins&lt;/code&gt;,于是我们得另行使用独立的安装的环境.&lt;/p&gt;&lt;/div&gt;
&lt;h3 id=&quot;最终结果&quot;&gt;&lt;a href=&quot;#最终结果&quot; class=&quot;headerlink&quot; title=&quot;最终结果&quot;&gt;&lt;/a&gt;最终结果&lt;/h3&gt;&lt;p&gt;最终我们要实现的是实现Jenkins上面配置&lt;strong&gt;应用版本号&lt;/strong&gt;、&lt;strong&gt;Git分支&lt;/strong&gt;、&lt;strong&gt;应用渠道&lt;/strong&gt;、&lt;strong&gt;请求基地址&lt;/strong&gt;、&lt;strong&gt;应用环境&lt;/strong&gt;等参数,进行一键参数化构建打包上传至蒲公英并发送邮件通知给&lt;strong&gt;自定义的接收者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最终实现参数化配置大致如下所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_total.png&quot; alt=&quot;jenkins_total&quot;&gt;&lt;/p&gt;
&lt;p&gt;发送邮件(邮件内容较长,进行了相应缩小)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_171024/jenkins_result.jpg&quot; alt=&quot;jenkins_total&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://lhalcyon.com/categories/Android/"/>
    
    
      <category term="Jenkins" scheme="https://lhalcyon.com/tags/Jenkins/"/>
    
      <category term="Android" scheme="https://lhalcyon.com/tags/Android/"/>
    
      <category term="Linux" scheme="https://lhalcyon.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>混编:Swift调用Objective-C</title>
    <link href="https://lhalcyon.com/hybrid-compile_swift2oc/"/>
    <id>https://lhalcyon.com/hybrid-compile_swift2oc/</id>
    <published>2017-06-20T08:02:11.000Z</published>
    <updated>2018-02-04T08:01:52.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Xcode 8.3.3</li><li>Swift3.+</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-创建混编桥接头文件"><a href="#1-创建混编桥接头文件" class="headerlink" title="1.创建混编桥接头文件"></a>1.创建混编桥接头文件</h4><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_170620/hybrid-compile.png" alt="hybrid-compile"></p><p>名称随便取,最好能和普通header文件做区别</p><h4 id="2-项目配置桥接文件"><a href="#2-项目配置桥接文件" class="headerlink" title="2.项目配置桥接文件"></a>2.项目配置桥接文件</h4><ol><li>点击工程,选中<code>Build Settings</code>,子选项勾选<code>All</code></li><li>在下面配置中找到(或者搜索)<code>Swift Compile - General</code></li><li>配置混编桥接头文件</li></ol><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_170620/bridge-config.png" alt="bridge-config"></p><p>点开图中红圈区域进行配置,如我所建的文件在工程里路径为<code>MyProject/Hybrid-Compile.h</code></p><p>则配置也应是这个路径</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_170620/path-config.png" alt="path-config"></p><p>保存后在该头文件中引用相应OC类头文件即可在Swift中调用</p><h3 id="引用注意"><a href="#引用注意" class="headerlink" title="引用注意"></a>引用注意</h3><p>如果是项目内的OC文件直接引用即可</p><p>如果是<code>Pod</code>引用的库中的OC文件则需要带上其<code>Pod</code>中的路径</p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_170620/reference.png" alt="reference"></p><p><img src="https://github.com/lhalcyon/RefImageRepo/raw/master/Hexo_170620/reference1.png" alt="reference1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Xcode 8.3.3&lt;/li&gt;
&lt;li&gt;Swift3.+&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步
      
    
    </summary>
    
      <category term="iOS" scheme="https://lhalcyon.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="https://lhalcyon.com/tags/Swift/"/>
    
      <category term="Xcode" scheme="https://lhalcyon.com/tags/Xcode/"/>
    
  </entry>
  
</feed>
